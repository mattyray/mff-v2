# FRONTEND CODE SNAPSHOT
# Generated for React/TypeScript project
# Total files: 30
# Total lines: 2,762
# Total characters: 86,239



# ==================== Configuration Files ====================



# ==== src/vite-env.d.ts ====

/// <reference types="vite/client" />


# ==== src/types/index.ts ====

// Donation Platform Types - FIXED VERSION

export interface Campaign {
  id: number;
  title: string;
  description: string;
  goal_amount: number;
  current_amount: number;
  progress_percentage: number;
  is_active: boolean;
  start_date: string;
  end_date?: string;
  featured_image?: string;
  featured_video_url?: string;  // ‚Üê ADDED THIS LINE
  created_at: string;
  updated_at: string;
}

export interface DonationTier {
  id: number;
  name: string;
  amount: number;
  description: string;
  campaign: number;
}

export interface Donation {
  id: number;
  amount: number;
  donor_name?: string;
  donor_email?: string;
  message?: string;
  is_anonymous: boolean;
  payment_status: 'pending' | 'completed' | 'failed' | 'refunded';
  created_at: string;
  campaign: number;
  tier?: DonationTier;
}

export interface User {
  id: number;
  email: string;
  first_name: string;
  last_name: string;
}

export interface ApiError {
  error: string;
  message?: string;
  details?: any;
}

export interface CampaignUpdate {
  id: number;
  title: string;
  content: string;
  video_url?: string;
  video_embed_code?: string;
  image_url?: string;
  has_video: boolean;
  created_at: string;
}

export interface CreateDonationRequest {
  amount: number;
  donor_name?: string;
  donor_email?: string;
  message?: string;
  is_anonymous: boolean;
}

export interface CreateDonationResponse {
  checkout_url: string;
  donation_id: number;
}

# ==== src/hooks/useAuth.ts ====

import { useState, useEffect, useCallback } from 'react';
import { DonationAPI } from '../services/api';

interface User {
  id: number;
  email: string;
  first_name: string;
  last_name: string;
}

interface UseAuthReturn {
  user: User | null;
  isAuthenticated: boolean;
  loading: boolean;
  error: string | null;
  login: (token: string, userData: User) => void;
  logout: () => Promise<void>;
  checkAuthStatus: () => Promise<void>;
  clearError: () => void;
}

export const useAuth = (): UseAuthReturn => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const checkAuthStatus = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      
      const token = localStorage.getItem('authToken');
      if (!token) {
        setUser(null);
        return;
      }

      // Verify token is still valid by getting user info
      const userData = await DonationAPI.refreshUserSession();
      setUser(userData);
    } catch (err) {
      console.log('Auth check failed:', err);
      // Clear invalid token
      localStorage.removeItem('authToken');
      setUser(null);
      setError(err instanceof Error ? err.message : 'Authentication failed');
    } finally {
      setLoading(false);
    }
  }, []);

  const login = useCallback((token: string, userData: User) => {
    localStorage.setItem('authToken', token);
    setUser(userData);
    setError(null);
    console.log('‚úÖ User logged in:', userData.email);
  }, []);

  const logout = useCallback(async () => {
    try {
      await DonationAPI.logout();
    } catch (err) {
      console.error('Logout API call failed:', err);
      // Continue with logout even if API call fails
    } finally {
      localStorage.removeItem('authToken');
      setUser(null);
      setError(null);
      console.log('‚úÖ User logged out');
    }
  }, []);

  const clearError = useCallback(() => {
    setError(null);
  }, []);

  // Check auth status on mount
  useEffect(() => {
    checkAuthStatus();
  }, [checkAuthStatus]);

  return {
    user,
    isAuthenticated: !!user,
    loading,
    error,
    login,
    logout,
    checkAuthStatus,
    clearError,
  };
};

# ==== src/services/api.ts ====

import axios from 'axios';
import type { 
  Campaign, 
  Donation, 
  CampaignUpdate, 
  User, 
  ApiError,
  CreateDonationRequest,
  CreateDonationResponse
} from '../types/index';

// Read from environment variables
const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://127.0.0.1:8003';

console.log('üîß Environment check:');
console.log('  - API_BASE_URL:', API_BASE_URL);

const api = axios.create({
  baseURL: API_BASE_URL,
  timeout: 30000,
  withCredentials: true,
});

// Add request interceptor to include auth token in headers
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('authToken');
    if (token) {
      config.headers.Authorization = `Token ${token}`;
      console.log('üîë Adding auth token to request:', config.url);
    }
    return config;
  },
  (error) => {
    console.error('‚ùå Request interceptor error:', error);
    return Promise.reject(error);
  }
);

// Add response interceptor for error handling
api.interceptors.response.use(
  (response) => response,
  (error) => {
    console.error(`‚ùå API Error: ${error.response?.status}`, error.response?.data);
    return Promise.reject(error);
  }
);

export class DonationAPI {
  // Campaign endpoints
  static async getCampaign(): Promise<Campaign> {
    try {
      const response = await api.get<Campaign>('/api/donations/campaign/');
      return response.data;
    } catch (error) {
      throw this.handleApiError(error);
    }
  }

  static async getCampaignUpdates(): Promise<CampaignUpdate[]> {
    try {
      const response = await api.get<CampaignUpdate[]>('/api/donations/updates/');
      return response.data;
    } catch (error) {
      throw this.handleApiError(error);
    }
  }

  static async getRecentDonations(): Promise<Donation[]> {
    try {
      const response = await api.get<Donation[]>('/api/donations/recent/');
      return response.data;
    } catch (error) {
      throw this.handleApiError(error);
    }
  }

  static async createDonation(donationData: CreateDonationRequest): Promise<CreateDonationResponse> {
    try {
      const response = await api.post('/api/donations/create/', donationData);
      return response.data;
    } catch (error) {
      throw this.handleApiError(error);
    }
  }

  // Auth endpoints
  static async googleAuth(credential: string, userInfo: any) {
    try {
      console.log('üîë Sending Google auth request...');
      const response = await api.post('/api/accounts/auth/google/', { 
        credential: credential,
        user_info: userInfo
      });
      console.log('‚úÖ Google auth successful:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Google auth failed:', error);
      throw this.handleApiError(error);
    }
  }

  static async facebookAuth(accessToken: string, userInfo: any) {
    try {
      console.log('üîë Sending Facebook auth request...');
      const response = await api.post('/api/accounts/auth/facebook/', { 
        access_token: accessToken,
        user_info: userInfo
      });
      console.log('‚úÖ Facebook auth successful:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Facebook auth failed:', error);
      throw this.handleApiError(error);
    }
  }

  static async refreshUserSession(): Promise<User> {
    try {
      const response = await api.get('/api/accounts/me/');
      return response.data;
    } catch (error) {
      throw this.handleApiError(error);
    }
  }

  static async signUp(email: string, password: string, firstName?: string, lastName?: string) {
    try {
      const response = await api.post('/api/accounts/signup/', {
        email,
        password,
        first_name: firstName || '',
        last_name: lastName || ''
      });
      return response.data;
    } catch (error) {
      throw this.handleApiError(error);
    }
  }

  static async login(email: string, password: string) {
    try {
      const response = await api.post('/api/accounts/login/', {
        email,
        password
      });
      return response.data;
    } catch (error) {
      throw this.handleApiError(error);
    }
  }

  static async logout() {
    try {
      await api.post('/api/accounts/logout/');
      localStorage.removeItem('authToken');
      return true;
    } catch (error) {
      console.error('Logout error:', error);
      localStorage.removeItem('authToken');
      return false;
    }
  }

  static async testConnection(): Promise<boolean> {
    try {
      await api.get('/health/');
      return true;
    } catch (error) {
      return false;
    }
  }

  private static handleApiError(error: unknown): Error {
    if (axios.isAxiosError(error)) {
      if (error.code === 'ECONNREFUSED') {
        throw new Error('Cannot connect to server. Make sure the backend is running.');
      }
      
      if (error.response?.status === 401) {
        const errorData = error.response.data as ApiError;
        throw new Error(errorData.error || 'Authentication failed');
      }
      
      if (error.response?.data) {
        const apiError = error.response.data as ApiError;
        throw new Error(apiError.error || `Server error: ${error.response.status}`);
      }
    }
    
    throw new Error('Network error. Please check your connection and try again.');
  }
}

export default api;

# ==== ./tsconfig.node.json ====

{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}


# ==== ./tailwind.config.js ====

/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#eff6ff',
          100: '#dbeafe',
          200: '#bfdbfe',
          300: '#93c5fd',
          400: '#60a5fa',
          500: '#3b82f6',
          600: '#2563eb',
          700: '#1d4ed8',
          800: '#1e40af',
          900: '#1e3a8a',
        }
      },
      animation: {
        'pulse-slow': 'pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite',
      }
    },
  },
  plugins: [],
}

# ==== ./netlify.toml ====

[build]
  command = "npm run build"
  publish = "dist"

# Fix SPA routing
[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200

# Fix MIME types
[[headers]]
  for = "*.js"
  [headers.values]
    Content-Type = "application/javascript; charset=utf-8"

[[headers]]
  for = "*.mjs"
  [headers.values]
    Content-Type = "application/javascript; charset=utf-8"

[[headers]]
  for = "*.css"
  [headers.values]
    Content-Type = "text/css; charset=utf-8"

# Cache assets
[[headers]]
  for = "/assets/*"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"

# ==== ./tsconfig.app.json ====

{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting - Relaxed for deployment */
    "strict": true,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}

# ==== ./package.json ====

{
  "name": "matt-freedom-fundraiser-frontend",
  "private": true,
  "version": "1.0.0",
  "type": "module",
  "description": "Frontend for Matt Raynor's fundraising platform",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "axios": "^1.10.0",
    "lucide-react": "^0.516.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.25.0",
    "@types/react": "^19.1.2",
    "@types/react-dom": "^19.1.2",
    "@vitejs/plugin-react": "^4.6.0",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.25.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^16.0.0",
    "postcss": "^8.5.6",
    "tailwindcss": "^3.4.17",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.30.1",
    "vite": "^6.3.5"
  }
}




# ==== ./tsconfig.json ====

{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}


# ==== ./eslint.config.js ====

import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)


# ==== ./vite.config.ts ====

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
  server: {
    port: 5173,
    host: true,
    open: true
  },
  css: {
    postcss: './postcss.config.js'
  },
  build: {
    outDir: 'dist',
    sourcemap: true
  }
})

# ==== ./postcss.config.js ====

export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}


# ==================== Main React Files ====================



# ==== src/App.tsx ====

import { CheckCircle, XCircle, ArrowLeft } from 'lucide-react';
import CampaignPage from './components/CampaignPage';
import UserMenu from './components/UserMenu';
import { useAuth } from './hooks/useAuth';

function App() {
  const { checkAuthStatus } = useAuth();
  
  // Simple routing based on URL path
  const path = window.location.pathname;

  // Success page
  if (path === '/success') {
    return (
      <div className="min-h-screen bg-[var(--ocean-mist)] flex items-center justify-center p-4">
        <div className="max-w-md w-full bg-white rounded-2xl shadow-xl p-8 text-center">
          <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6">
            <CheckCircle className="w-10 h-10 text-green-500" />
          </div>
          
          <h1 className="text-2xl font-bold text-[var(--ocean-deep)] mb-4">
            Thank You! üéâ
          </h1>
          
          <p className="text-[var(--ocean-driftwood)] mb-6">
            Your donation has been successfully processed. You're helping make a real difference in Matt's journey!
          </p>
          
          <button
            onClick={() => window.location.href = '/'}
            className="btn-ocean-primary w-full"
          >
            <ArrowLeft className="w-5 h-5 mr-2" />
            Back to Campaign
          </button>
        </div>
      </div>
    );
  }

  // Cancel page
  if (path === '/cancel') {
    return (
      <div className="min-h-screen bg-[var(--ocean-mist)] flex items-center justify-center p-4">
        <div className="max-w-md w-full bg-white rounded-2xl shadow-xl p-8 text-center">
          <div className="w-16 h-16 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-6">
            <XCircle className="w-10 h-10 text-orange-500" />
          </div>
          
          <h1 className="text-2xl font-bold text-[var(--ocean-deep)] mb-4">
            Payment Cancelled
          </h1>
          
          <p className="text-[var(--ocean-driftwood)] mb-6">
            No worries! Your payment was cancelled and no charges were made.
          </p>
          
          <button
            onClick={() => window.location.href = '/'}
            className="btn-ocean-primary w-full"
          >
            <ArrowLeft className="w-5 h-5 mr-2" />
            Try Again
          </button>
        </div>
      </div>
    );
  }

  // Default campaign page
  return (
    <div className="min-h-screen">
      <header className="bg-white border-b border-gray-100 sticky top-0 z-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-xl font-bold text-gray-900">Matt Freedom Fundraiser</h1>
            </div>
            
            <UserMenu 
              onShowRegistrationGate={() => console.log('Show registration')}
              onUserStateChange={checkAuthStatus}
            />
          </div>
        </div>
      </header>

      <main>
        <CampaignPage />
      </main>
    </div>
  );
}

export default App;

# ==== src/main.tsx ====

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import App from './App.tsx'
import ErrorBoundary from './components/ErrorBoundary.tsx'
import './index.css'

console.log('üöÄ main.tsx loading...');

const rootElement = document.getElementById('root');
if (!rootElement) {
  throw new Error('Root element not found');
}

console.log('‚úÖ Root element found, mounting React app...');

createRoot(rootElement).render(
  <StrictMode>
    <ErrorBoundary>
      <App />
    </ErrorBoundary>
  </StrictMode>
);

console.log('‚úÖ React app mounted successfully!');

# ==================== React Components ====================



# ==== src/components/UserMenu.tsx ====

import React, { useState, useRef, useEffect } from 'react';
import { LogOut, Settings, History, ChevronDown } from 'lucide-react';
import { DonationAPI } from '../services/api';

interface UserData {
  id: number;
  email: string;
  first_name: string;
  last_name: string;
}

interface UserMenuProps {
  onShowRegistrationGate: () => void;
  onUserStateChange?: () => void;
}

const UserMenu: React.FC<UserMenuProps> = ({ onShowRegistrationGate, onUserStateChange }) => {
  const [isOpen, setIsOpen] = useState(false);
  const [user, setUser] = useState<UserData | null>(null);
  const [loading, setLoading] = useState(true);
  const dropdownRef = useRef<HTMLDivElement>(null);

  // Check authentication status on mount
  useEffect(() => {
    checkAuthStatus();
  }, []);

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  const checkAuthStatus = async () => {
    try {
      const token = localStorage.getItem('authToken');
      if (!token) {
        setLoading(false);
        return;
      }

      // Try to get user info to verify token is valid
      const userData = await DonationAPI.refreshUserSession();
      setUser(userData);
    } catch (error) {
      console.log('User not authenticated:', error);
      // Clear invalid token
      localStorage.removeItem('authToken');
      setUser(null);
    } finally {
      setLoading(false);
    }
  };

  const handleSignIn = () => {
    onShowRegistrationGate();
    setIsOpen(false);
  };

  const handleLogout = async () => {
    try {
      await DonationAPI.logout();
      setUser(null);
      setIsOpen(false);
      
      // Notify parent about user state change
      if (onUserStateChange) {
        onUserStateChange();
      }
      
      // Refresh page to reset any cached user data
      window.location.reload();
    } catch (error) {
      console.error('Logout error:', error);
      // Force logout even if API call fails
      localStorage.removeItem('authToken');
      setUser(null);
      window.location.reload();
    }
  };

  const getUserInitials = (user: UserData): string => {
    const first = user.first_name?.charAt(0) || '';
    const last = user.last_name?.charAt(0) || '';
    return (first + last).toUpperCase() || user.email?.charAt(0).toUpperCase() || '?';
  };

  const getUserDisplayName = (user: UserData): string => {
    if (user.first_name && user.last_name) {
      return `${user.first_name} ${user.last_name}`;
    }
    if (user.first_name) {
      return user.first_name;
    }
    return user.email;
  };

  // Loading state
  if (loading) {
    return (
      <div className="w-8 h-8 bg-gray-200 rounded-full animate-pulse"></div>
    );
  }

  // Logged out state
  if (!user) {
    return (
      <button
        onClick={handleSignIn}
        className="bg-white hover:bg-gray-50 text-gray-700 font-semibold py-2 px-4 rounded-lg border border-gray-300 hover:border-gray-400 transition-all duration-200 text-sm"
      >
        Sign In
      </button>
    );
  }

  // Logged in state
  return (
    <div className="relative" ref={dropdownRef}>
      {/* User Avatar Button */}
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center gap-2 p-2 rounded-lg hover:bg-gray-100 transition-colors"
      >
        <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-500 rounded-full flex items-center justify-center text-white font-semibold text-sm">
          {getUserInitials(user)}
        </div>
        <ChevronDown 
          size={16} 
          className={`text-gray-500 transition-transform ${isOpen ? 'rotate-180' : ''}`} 
        />
      </button>

      {/* Dropdown Menu */}
      {isOpen && (
        <div className="absolute right-0 mt-2 w-64 bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-50">
          {/* User Info */}
          <div className="px-4 py-3 border-b border-gray-100">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-500 rounded-full flex items-center justify-center text-white font-semibold">
                {getUserInitials(user)}
              </div>
              <div>
                <div className="font-medium text-gray-900">{getUserDisplayName(user)}</div>
                <div className="text-sm text-gray-500">{user.email}</div>
              </div>
            </div>
          </div>

          {/* Menu Items */}
          <div className="py-1">
            <button
              onClick={() => {
                setIsOpen(false);
                alert('Account settings coming soon!');
              }}
              className="w-full flex items-center gap-3 px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors"
            >
              <Settings size={16} />
              Account Settings
            </button>
            
            <button
              onClick={() => {
                setIsOpen(false);
                alert('Donation history coming soon!');
              }}
              className="w-full flex items-center gap-3 px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors"
            >
              <History size={16} />
              My Donations
            </button>
          </div>

          {/* Logout */}
          <div className="border-t border-gray-100 py-1">
            <button
              onClick={handleLogout}
              className="w-full flex items-center gap-3 px-4 py-2 text-sm text-red-600 hover:bg-red-50 transition-colors"
            >
              <LogOut size={16} />
              Sign Out
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default UserMenu;

# ==== src/components/CampaignPage.tsx ====

import React, { useState, useEffect } from 'react';
import { DonationAPI } from '../services/api';
import type { Campaign } from '../types/index';

import HeroSection from './sections/HeroSection';
import ProgressSection from './sections/ProgressSection';
import DonationSection from './sections/DonationSection';
import UpdatesSection from './sections/UpdatesSection';
import SupportersSection from './sections/SupportersSection';

const CampaignPage: React.FC = () => {
  const [campaign, setCampaign] = useState<Campaign | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchCampaign = async () => {
      try {
        const data = await DonationAPI.getCampaign();
        setCampaign(data);
      } catch (error) {
        console.error('Failed to load campaign:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchCampaign();
  }, []);

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-[var(--ocean-blue)] mx-auto mb-4"></div>
          <p className="text-[var(--ocean-driftwood)]">Loading campaign...</p>
        </div>
      </div>
    );
  }

  if (!campaign) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <p className="text-[var(--ocean-driftwood)]">No active campaign found.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-white">
      <HeroSection campaign={campaign} />
      <ProgressSection campaign={campaign} />
      <DonationSection campaign={campaign} />
      <UpdatesSection />
      <SupportersSection />
    </div>
  );
};

export default CampaignPage;

# ==== src/components/SocialAuth.tsx ====

import React, { useEffect, useRef, useState } from 'react';

declare global {
  interface Window {
    google: any;
    FB: any;
    fbReady?: boolean;
    fbSkipped?: boolean;
  }
}

interface SocialAuthProps {
  onGoogleSuccess: (token: string, userInfo: any) => void;
  onFacebookSuccess: (token: string, userInfo: any) => void;
  onError: (error: string) => void;
  disabled?: boolean;
}

const SocialAuth: React.FC<SocialAuthProps> = ({ 
  onGoogleSuccess, 
  onFacebookSuccess, 
  onError,
  disabled = false
}) => {
  const googleButtonRef = useRef<HTMLDivElement>(null);
  const [googleReady, setGoogleReady] = useState(false);
  const [facebookReady, setFacebookReady] = useState(false);
  const [loadingGoogle, setLoadingGoogle] = useState(true);

  // üî• FIXED: Proper VITE_ prefix
  const GOOGLE_CLIENT_ID = import.meta.env.VITE_GOOGLE_CLIENT_ID;
  const FACEBOOK_APP_ID = import.meta.env.VITE_FACEBOOK_APP_ID;
  
  const isLocalhost = window.location.hostname === 'localhost';
  const isHTTPS = window.location.protocol === 'https:';
  const facebookAllowed = isHTTPS || isLocalhost;

  console.log('üîß SSO Debug:', {
    googleClientId: GOOGLE_CLIENT_ID ? `${GOOGLE_CLIENT_ID.substring(0, 20)}...` : 'MISSING',
    facebookAppId: FACEBOOK_APP_ID || 'MISSING',
    protocol: window.location.protocol,
    facebookAllowed,
    googleButtonRef: !!googleButtonRef.current
  });

  // üî• FIXED: Better Google initialization
  useEffect(() => {
    if (!GOOGLE_CLIENT_ID) {
      console.error('‚ùå VITE_GOOGLE_CLIENT_ID missing');
      setLoadingGoogle(false);
      return;
    }

    let attempts = 0;
    const maxAttempts = 50;

    const initGoogle = () => {
      attempts++;
      
      if (window.google?.accounts?.id) {
        try {
          console.log('üîß Initializing Google OAuth...');
          
          window.google.accounts.id.initialize({
            client_id: GOOGLE_CLIENT_ID,
            callback: handleGoogleResponse,
            auto_select: false,
            cancel_on_tap_outside: true,
          });

          // üî• FIXED: Force render after a delay to ensure DOM is ready
          setTimeout(() => {
            if (googleButtonRef.current) {
              try {
                window.google.accounts.id.renderButton(googleButtonRef.current, {
                  theme: 'outline',
                  size: 'large',
                  width: '100%',
                  text: 'continue_with',
                  shape: 'rectangular',
                  logo_alignment: 'left'
                });
                setGoogleReady(true);
                setLoadingGoogle(false);
                console.log('‚úÖ Google button rendered');
              } catch (renderError) {
                console.error('‚ùå Google button render error:', renderError);
                setLoadingGoogle(false);
              }
            } else {
              console.error('‚ùå Google button ref not available');
              setLoadingGoogle(false);
            }
          }, 100);

          console.log('‚úÖ Google OAuth initialized');
          return;
        } catch (error) {
          console.error('‚ùå Google init error:', error);
          setLoadingGoogle(false);
        }
      }

      if (attempts < maxAttempts) {
        setTimeout(initGoogle, 100);
      } else {
        console.error('‚ùå Google SDK failed to load after 5 seconds');
        setLoadingGoogle(false);
        onError('Google authentication unavailable');
      }
    };

    initGoogle();
  }, [GOOGLE_CLIENT_ID]);

  // Initialize Facebook
  useEffect(() => {
    if (!facebookAllowed) {
      console.log('‚ö†Ô∏è Facebook disabled - requires HTTPS');
      return;
    }

    let attempts = 0;
    const checkFB = () => {
      attempts++;
      
      if (window.fbReady && window.FB) {
        setFacebookReady(true);
        console.log('‚úÖ Facebook ready');
        return;
      }

      if (window.fbSkipped) {
        console.log('‚ö†Ô∏è Facebook SDK was skipped');
        return;
      }

      if (attempts < 50) {
        setTimeout(checkFB, 100);
      }
    };

    checkFB();
  }, [facebookAllowed]);

  const handleGoogleResponse = (response: any) => {
    try {
      console.log('üîë Google response:', response);
      
      if (!response.credential) {
        throw new Error('No credential from Google');
      }

      // Parse JWT payload
      const payload = JSON.parse(
        atob(response.credential.split('.')[1].replace(/-/g, '+').replace(/_/g, '/'))
      );
      
      console.log('üë§ Google user:', payload);
      onGoogleSuccess(response.credential, payload);
    } catch (error) {
      console.error('‚ùå Google auth error:', error);
      onError('Google authentication failed');
    }
  };

  const handleGoogleClick = () => {
    if (disabled) return;
    
    try {
      if (window.google?.accounts?.id) {
        window.google.accounts.id.prompt();
      } else {
        throw new Error('Google SDK not loaded');
      }
    } catch (error) {
      console.error('‚ùå Google prompt error:', error);
      onError('Failed to show Google login');
    }
  };

  const handleFacebookClick = () => {
    if (disabled || !facebookReady) return;
    
    if (!facebookAllowed) {
      onError('Facebook login requires HTTPS. Please use Google login instead.');
      return;
    }

    try {
      window.FB.login((response: any) => {
        console.log('üîë Facebook response:', response);
        
        if (response.authResponse) {
          window.FB.api('/me', { fields: 'name,email,first_name,last_name' }, (userInfo: any) => {
            console.log('üë§ Facebook user:', userInfo);
            onFacebookSuccess(response.authResponse.accessToken, userInfo);
          });
        } else {
          console.log('‚ùå Facebook login cancelled or failed');
          onError('Facebook login cancelled');
        }
      }, { scope: 'email,public_profile' });
    } catch (error) {
      console.error('‚ùå Facebook error:', error);
      onError('Facebook authentication failed');
    }
  };

  if (!GOOGLE_CLIENT_ID && !FACEBOOK_APP_ID) {
    return (
      <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
        <p className="text-yellow-800 text-sm">
          ‚ö†Ô∏è Social authentication not configured
        </p>
      </div>
    );
  }

  return (
    <div className="space-y-3">
      {/* Google Login */}
      {GOOGLE_CLIENT_ID && (
        <div className={disabled ? 'opacity-50 pointer-events-none' : ''}>
          {/* üî• FIXED: Always show the div, but conditionally render Google button or fallback */}
          <div ref={googleButtonRef} className="w-full min-h-[48px]" />
          
          {/* üî• FIXED: Fallback button if Google button doesn't render */}
          {!googleReady && !loadingGoogle && (
            <button
              onClick={handleGoogleClick}
              className="w-full flex items-center justify-center gap-3 bg-white border border-gray-300 hover:bg-gray-50 text-gray-700 font-semibold py-3 px-6 rounded-lg transition-colors"
            >
              <svg className="w-5 h-5" viewBox="0 0 24 24">
                <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
              </svg>
              Continue with Google
            </button>
          )}

          {/* Loading state */}
          {loadingGoogle && (
            <div className="w-full flex items-center justify-center py-3 text-gray-500">
              <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-gray-400 mr-2"></div>
              Loading Google...
            </div>
          )}
        </div>
      )}
      
      {/* Facebook Login - Simplified */}
      {FACEBOOK_APP_ID && (
        <button
          onClick={handleFacebookClick}
          disabled={!facebookAllowed || disabled}
          className="w-full flex items-center justify-center gap-3 bg-[#1877F2] hover:bg-[#166FE5] text-white font-semibold py-3 px-6 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
            <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/>
          </svg>
          {!facebookAllowed ? 'Facebook (HTTPS Required)' : 'Continue with Facebook'}
        </button>
      )}

      {/* Development warning */}
      {!facebookAllowed && (
        <p className="text-xs text-amber-600 text-center">
          ‚ö†Ô∏è Facebook requires HTTPS. Google login works on localhost.
        </p>
      )}
    </div>
  );
};

export default SocialAuth;

# ==== src/components/ErrorBoundary.tsx ====

import { Component, type ErrorInfo, type ReactNode } from 'react';
import { AlertTriangle, RefreshCw } from 'lucide-react';

interface Props {
  children: ReactNode;
}

interface State {
  hasError: boolean;
  error?: Error;
}

class ErrorBoundary extends Component<Props, State> {
  public state: State = {
    hasError: false
  };

  public static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error };
  }

  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('ErrorBoundary caught an error:', error, errorInfo);
  }

  private handleReset = () => {
    this.setState({ hasError: false, error: undefined });
  };

  public render() {
    if (this.state.hasError) {
      return (
        <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
          <div className="max-w-md w-full bg-white rounded-xl shadow-lg p-8 text-center">
            <div className="flex items-center justify-center mb-6">
              <AlertTriangle className="w-16 h-16 text-red-500" />
            </div>
            
            <h2 className="text-2xl font-bold text-gray-900 mb-4">
              Something went wrong
            </h2>
            
            <p className="text-gray-600 mb-6">
              We encountered an unexpected error. Don't worry, your data is safe.
            </p>
            
            <div className="space-y-4">
              <button
                onClick={this.handleReset}
                className="w-full bg-blue-500 hover:bg-blue-600 text-white font-semibold py-3 px-6 rounded-lg transition-colors flex items-center justify-center gap-2"
              >
                <RefreshCw size={20} />
                Try Again
              </button>
              
              <button
                onClick={() => window.location.reload()}
                className="w-full bg-white hover:bg-gray-50 text-gray-700 font-semibold py-3 px-6 rounded-lg border border-gray-300 hover:border-gray-400 transition-colors"
              >
                Reload Page
              </button>
            </div>
            
            {import.meta.env.DEV && this.state.error && (
              <details className="mt-6 text-left">
                <summary className="text-sm text-gray-500 cursor-pointer hover:text-gray-700">
                  Technical Details
                </summary>
                <pre className="mt-2 text-xs text-red-600 bg-red-50 p-3 rounded overflow-auto">
                  {this.state.error.toString()}
                </pre>
              </details>
            )}
          </div>
        </div>
      );
    }

    return this.props.children;
  }
}

export default ErrorBoundary;

# ==== src/components/sections/SupportersSection.tsx ====

import React, { useState, useEffect } from 'react';
import { Heart, MessageCircle } from 'lucide-react';
import { DonationAPI } from '../../services/api';
import type { Donation } from '../../types/index';

const SupportersSection: React.FC = () => {
  const [donations, setDonations] = useState<Donation[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchDonations = async () => {
      try {
        const data = await DonationAPI.getRecentDonations();
        setDonations(data);
      } catch (error) {
        console.error('Failed to load donations:', error);
      } finally {
        setLoading(false);
      }
    };
    fetchDonations();
  }, []);

  if (loading) {
    return (
      <section className="section-spacing bg-white">
        <div className="container-custom text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-[var(--ocean-blue)] mx-auto"></div>
        </div>
      </section>
    );
  }

  return (
    <section className="section-spacing bg-white">
      <div className="container-custom">
        <div className="text-center mb-16">
          <h2 className="mb-4">Recent Supporters</h2>
          <p className="text-xl text-[var(--ocean-driftwood)]">
            Amazing people making this journey possible
          </p>
        </div>

        {donations.length === 0 ? (
          <div className="text-center py-12">
            <Heart className="w-12 h-12 text-[var(--ocean-blue)] mx-auto mb-4" />
            <p className="text-[var(--ocean-driftwood)]">Be the first to support Matt's journey!</p>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {donations.map((donation) => (
              <div key={donation.id} className="card-ocean">
                <div className="flex justify-between items-start mb-3">
                  <div className="font-semibold text-[var(--ocean-deep)]">
                    {donation.donor_name || 'Anonymous Supporter'}
                  </div>
                  <div className="text-lg font-bold text-[var(--ocean-blue)]">
                    ${donation.amount}
                  </div>
                </div>
                
                {donation.message && (
                  <div className="flex items-start gap-2 mb-3">
                    <MessageCircle className="w-4 h-4 text-[var(--ocean-teal)] mt-1 flex-shrink-0" />
                    <p className="text-[var(--ocean-driftwood)] text-sm italic">
                      "{donation.message}"
                    </p>
                  </div>
                )}
                
                <div className="text-xs text-[var(--ocean-driftwood)]">
                  {new Date(donation.created_at).toLocaleDateString()}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </section>
  );
};

export default SupportersSection;

# ==== src/components/sections/UpdatesSection.tsx ====

import React, { useState, useEffect } from 'react';
import { Play, Calendar, ExternalLink } from 'lucide-react';
import { DonationAPI } from '../../services/api';
import type { CampaignUpdate } from '../../types/index';

const UpdatesSection: React.FC = () => {
  const [updates, setUpdates] = useState<CampaignUpdate[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchUpdates = async () => {
      try {
        const data = await DonationAPI.getCampaignUpdates();
        setUpdates(data);
      } catch (error) {
        console.error('Failed to load updates:', error);
      } finally {
        setLoading(false);
      }
    };
    fetchUpdates();
  }, []);

  if (loading) {
    return (
      <section className="section-spacing section-ocean-mist">
        <div className="container-custom text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-[var(--ocean-blue)] mx-auto"></div>
        </div>
      </section>
    );
  }

  return (
    <section id="updates" className="section-spacing section-ocean-mist">
      <div className="container-custom">
        <div className="text-center mb-16">
          <h2 className="mb-4">Latest Updates</h2>
          <p className="text-xl text-[var(--ocean-driftwood)] max-w-2xl mx-auto">
            Follow my journey and see how your support is making a difference
          </p>
        </div>

        {updates.length === 0 ? (
          <div className="text-center py-12">
            <p className="text-[var(--ocean-driftwood)]">No updates yet. Check back soon!</p>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {updates.map((update) => (
              <div key={update.id} className="card-ocean">
                {update.image_url && (
                  <img 
                    src={update.image_url} 
                    alt={update.title}
                    className="w-full h-48 object-cover rounded-lg mb-4"
                  />
                )}
                
                <div className="flex items-center gap-2 text-[var(--ocean-driftwood)] text-sm mb-2">
                  <Calendar className="w-4 h-4" />
                  {new Date(update.created_at).toLocaleDateString()}
                </div>
                
                <h3 className="text-[var(--ocean-deep)] mb-3">{update.title}</h3>
                <p className="text-[var(--ocean-driftwood)] mb-4">{update.content}</p>
                
                {update.video_url && (
                  <a
                    href={update.video_url}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="inline-flex items-center gap-2 text-[var(--ocean-blue)] hover:text-[var(--ocean-teal)] font-medium"
                  >
                    <Play className="w-4 h-4" />
                    Watch Video
                    <ExternalLink className="w-4 h-4" />
                  </a>
                )}
              </div>
            ))}
          </div>
        )}
      </div>
    </section>
  );
};

export default UpdatesSection;

# ==== src/components/sections/DonationSection.tsx ====

import React, { useState } from 'react';
import { Heart, CreditCard, Shield, AlertCircle, Home } from 'lucide-react';
import { DonationAPI } from '../../services/api';
import type { Campaign } from '../../types/index';

interface DonationSectionProps {
  campaign: Campaign;
}

const DonationSection: React.FC<DonationSectionProps> = ({ campaign }) => {
  const [amount, setAmount] = useState('');
  const [donorName, setDonorName] = useState('');
  const [donorEmail, setDonorEmail] = useState('');
  const [message, setMessage] = useState('');
  const [isAnonymous, setIsAnonymous] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const quickAmounts = [25, 50, 100, 250, 500, 1000];

  const handleQuickAmount = (value: number) => {
    setAmount(value.toString());
    setError('');
  };

  const handleDonate = async () => {
    if (!amount || parseFloat(amount) < 1) {
      setError('Please enter a valid amount');
      return;
    }
    
    setLoading(true);
    setError('');
    
    try {
      const response = await DonationAPI.createDonation({
        amount: parseFloat(amount),
        donor_name: isAnonymous ? '' : donorName,
        donor_email: isAnonymous ? '' : donorEmail,
        message,
        is_anonymous: isAnonymous
      });
      
      // Redirect to Stripe Checkout
      if (response.checkout_url) {
        window.location.href = response.checkout_url;
      } else {
        throw new Error('No checkout URL received');
      }
      
    } catch (error: any) {
      console.error('Donation error:', error);
      setError(error.message || 'Payment setup failed. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <section id="donate" className="section-spacing bg-white">
      <div className="container-custom">
        
        <div className="text-center mb-16">
          <div className="inline-flex items-center gap-2 bg-[var(--ocean-blue)]/10 rounded-full px-4 py-2 mb-4">
            <Home className="w-4 h-4 text-[var(--ocean-blue)]" />
            <span className="text-[var(--ocean-blue)] text-sm font-medium">Bridge to Independence</span>
          </div>
          
          <h2 className="mb-4">Help Me Take the Final Step</h2>
          <p className="text-xl text-[var(--ocean-driftwood)] max-w-2xl mx-auto">
            After two years of preparation, I'm moving out November 3rd. Your support covers care costs during 
            the final government processing delays, ensuring I can move forward with confidence.
          </p>
        </div>

        <div className="max-w-2xl mx-auto">
          <div className="card-ocean">
            
            {/* Error Message */}
            {error && (
              <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-xl flex items-start gap-3">
                <AlertCircle className="w-5 h-5 text-red-500 mt-0.5 flex-shrink-0" />
                <p className="text-red-700 text-sm">{error}</p>
              </div>
            )}

            {/* Impact Preview */}
            <div className="mb-6 p-4 bg-[var(--ocean-mist)] rounded-xl">
              <h4 className="text-[var(--ocean-deep)] font-semibold mb-2">Your Impact</h4>
              <p className="text-[var(--ocean-driftwood)] text-sm mb-3">
                Every contribution helps me bridge the gap between being ready to move out and having 
                the care support fully in place. This is the final mile of a two-year journey.
              </p>
              <div className="grid grid-cols-2 gap-2 text-xs">
                <div className="flex items-center gap-1">
                  <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                  <span>Apartment renovated ‚úì</span>
                </div>
                <div className="flex items-center gap-1">
                  <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                  <span>Care approved ‚úì</span>
                </div>
                <div className="flex items-center gap-1">
                  <div className="w-2 h-2 bg-yellow-500 rounded-full"></div>
                  <span>Bridge funding needed</span>
                </div>
                <div className="flex items-center gap-1">
                  <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                  <span>Nov 3rd move-out</span>
                </div>
              </div>
            </div>
            
            {/* Quick Amount Buttons */}
            <div className="mb-6">
              <label className="block text-sm font-medium text-[var(--ocean-deep)] mb-3">
                Choose an amount:
              </label>
              <div className="grid grid-cols-3 gap-3">
                {quickAmounts.map((value) => (
                  <button
                    key={value}
                    onClick={() => handleQuickAmount(value)}
                    disabled={loading}
                    className={`py-3 px-4 rounded-xl border-2 transition-all duration-300 disabled:opacity-50 ${
                      amount === value.toString()
                        ? 'border-[var(--ocean-blue)] bg-[var(--ocean-blue)]/10 text-[var(--ocean-blue)]'
                        : 'border-gray-200 hover:border-[var(--ocean-blue)]/50'
                    }`}
                  >
                    ${value}
                  </button>
                ))}
              </div>
            </div>

            {/* Custom Amount */}
            <div className="mb-6">
              <label className="block text-sm font-medium text-[var(--ocean-deep)] mb-2">
                Or enter custom amount:
              </label>
              <div className="relative">
                <span className="absolute left-3 top-1/2 transform -translate-y-1/2 text-[var(--ocean-driftwood)]">
                  $
                </span>
                <input
                  type="number"
                  value={amount}
                  onChange={(e) => {
                    setAmount(e.target.value);
                    setError('');
                  }}
                  disabled={loading}
                  placeholder="0.00"
                  className="input-ocean pl-8"
                />
              </div>
            </div>

            {/* Donor Information */}
            <div className="space-y-4 mb-6">
              <div>
                <label className="block text-sm font-medium text-[var(--ocean-deep)] mb-1">
                  Full Name (optional)
                </label>
                <input
                  type="text"
                  value={donorName}
                  onChange={(e) => setDonorName(e.target.value)}
                  disabled={isAnonymous || loading}
                  placeholder="Your name"
                  className={`input-ocean ${isAnonymous ? 'opacity-50' : ''}`}
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-[var(--ocean-deep)] mb-1">
                  Email Address (optional)
                </label>
                <input
                  type="email"
                  value={donorEmail}
                  onChange={(e) => setDonorEmail(e.target.value)}
                  disabled={isAnonymous || loading}
                  placeholder="your@email.com"
                  className={`input-ocean ${isAnonymous ? 'opacity-50' : ''}`}
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-[var(--ocean-deep)] mb-1">
                  Message (optional)
                </label>
                <textarea
                  value={message}
                  onChange={(e) => setMessage(e.target.value)}
                  disabled={loading}
                  placeholder="Share words of encouragement for the final step..."
                  rows={3}
                  className="input-ocean resize-none"
                />
              </div>

              <label className="flex items-center gap-3 cursor-pointer">
                <input
                  type="checkbox"
                  checked={isAnonymous}
                  onChange={(e) => setIsAnonymous(e.target.checked)}
                  disabled={loading}
                  className="w-5 h-5 text-[var(--ocean-blue)] border-gray-300 rounded focus:ring-[var(--ocean-blue)]"
                />
                <span className="text-[var(--ocean-deep)] text-sm">
                  Make this donation anonymous
                </span>
              </label>
            </div>

            {/* Submit Button */}
            <button
              onClick={handleDonate}
              disabled={!amount || parseFloat(amount) < 1 || loading}
              className={`w-full btn-ocean-primary text-lg ${loading ? 'opacity-50 cursor-not-allowed' : ''}`}
            >
              {loading ? (
                <div className="flex items-center justify-center gap-2">
                  <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                  Processing...
                </div>
              ) : (
                <div className="flex items-center justify-center gap-2">
                  <CreditCard className="w-5 h-5" />
                  Support Independence - ${amount || '0'}
                </div>
              )}
            </button>

            <div className="flex items-center justify-center gap-2 mt-4 text-sm text-[var(--ocean-driftwood)]">
              <Shield className="w-4 h-4" />
              Secure payment processing by Stripe
            </div>

            {/* Additional Context */}
            <div className="mt-6 p-4 bg-gray-50 rounded-xl">
              <p className="text-sm text-[var(--ocean-driftwood)] text-center">
                <strong>Any amount helps.</strong> I always end up needing to pay people extra for various things, 
                and every dollar makes this transition more secure. Thank you for being part of my journey to independence.
              </p>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default DonationSection;

# ==== src/components/sections/HeroSection.tsx ====

import React, { useState, useEffect } from 'react';
import { ArrowDown, Play, Heart, Home } from 'lucide-react';
import type { Campaign } from '../../types/index';

interface HeroSectionProps {
  campaign: Campaign;
}

const HeroSection: React.FC<HeroSectionProps> = ({ campaign }) => {
  const [currentAmount, setCurrentAmount] = useState(0);
  const [isVisible, setIsVisible] = useState(false);

  // Animate numbers on mount
  useEffect(() => {
    setIsVisible(true);
    const timer = setTimeout(() => {
      animateNumber(campaign.current_amount);
    }, 500);
    return () => clearTimeout(timer);
  }, [campaign.current_amount]);

  const animateNumber = (target: number) => {
    const duration = 2000;
    const steps = 60;
    const increment = target / steps;
    const stepDuration = duration / steps;
    
    let current = 0;
    const timer = setInterval(() => {
      current += increment;
      if (current >= target) {
        setCurrentAmount(target);
        clearInterval(timer);
      } else {
        setCurrentAmount(Math.floor(current));
      }
    }, stepDuration);
  };

  // Extract YouTube video ID from various URL formats
  const extractVideoId = (url: string) => {
    if (!url) return null;
    const match = url.match(/(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/)([^&\n?#]+)/);
    return match ? match[1] : null;
  };

  const handleDonateClick = () => {
    document.getElementById('donate')?.scrollIntoView({ behavior: 'smooth' });
  };

  const handleLearnMoreClick = () => {
    document.getElementById('updates')?.scrollIntoView({ behavior: 'smooth' });
  };

  return (
    <section className="relative min-h-screen overflow-hidden hero-ocean">
      {/* Simple Background Pattern */}
      <div className="absolute inset-0 opacity-10">
        <div className="absolute inset-0 bg-gradient-to-br from-white/5 to-transparent animate-pulse-slow"></div>
      </div>

      {/* Main Content */}
      <div className="relative z-10 container-custom">
        <div className="flex flex-col lg:flex-row items-center justify-between min-h-screen py-20">
          
          {/* Left Content - Story */}
          <div className={`lg:w-1/2 lg:pr-12 transition-all duration-1000 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'}`}>
            
            {/* Badge */}
            <div className="inline-flex items-center gap-2 bg-white/10 backdrop-blur-sm rounded-full px-4 py-2 mb-6">
              <Home className="w-4 h-4 text-[var(--ocean-sunrise)]" />
              <span className="text-white/90 text-sm font-medium">The Last Mile</span>
            </div>

            {/* Main Headline */}
            <h1 className="text-white mb-6 text-shadow-ocean">
              The Final Step to
              <span className="block text-[var(--ocean-seafoam)]">Independence</span>
            </h1>

            {/* Updated Subtitle */}
            <p className="text-xl lg:text-2xl text-white/90 mb-8 leading-relaxed">
              After two years of preparation, I'm moving out of the nursing home on November 3rd to my hometown of Hampton Bays. 
              The apartment is renovated, caregivers are in the pipeline, but I need bridge funding while government 
              registration processes finish. Your support helps me take this final step toward independence.
            </p>

            {/* Story Hook */}
            <div className="bg-white/10 backdrop-blur-sm rounded-2xl p-6 mb-8">
              <div className="flex items-start gap-4">
                <Home className="w-6 h-6 text-[var(--ocean-seafoam)] mt-1 flex-shrink-0" />
                <div>
                  <h3 className="text-white font-semibold mb-2">Everything Is Ready</h3>
                  <p className="text-white/80 text-base">
                    Apartment renovated ‚úì Caregivers identified ‚úì 24-hour care approved ‚úì 
                    I just need $6,000 to cover care costs during the final bureaucratic delays. 
                    This is the last mile of a two-year journey.
                  </p>
                </div>
              </div>
            </div>

            {/* CTA Buttons */}
            <div className="flex flex-col sm:flex-row gap-4 mb-8">
              <button 
                onClick={handleDonateClick}
                className="btn-ocean-primary bg-white text-[var(--ocean-blue)] hover:bg-[var(--ocean-mist)] shadow-2xl"
              >
                <Heart className="w-5 h-5 mr-2" />
                Support My Independence
              </button>
              
              <button 
                onClick={handleLearnMoreClick}
                className="btn-ocean-secondary bg-transparent border-white text-white hover:bg-white/10"
              >
                <Play className="w-5 h-5 mr-2" />
                Learn My Story
              </button>
            </div>

            {/* Quick Stats */}
            <div className="grid grid-cols-3 gap-6">
              <div className="text-center">
                <div className={`text-3xl font-bold text-white mb-1 transition-all duration-1000 ${isVisible ? 'animate-count-up' : ''}`}>
                  ${currentAmount.toLocaleString()}
                </div>
                <div className="text-white/70 text-sm">Raised</div>
              </div>
              
              <div className="text-center">
                <div className="text-3xl font-bold text-white mb-1">
                  ${campaign.goal_amount.toLocaleString()}
                </div>
                <div className="text-white/70 text-sm">Goal</div>
              </div>
              
              <div className="text-center">
                <div className="text-3xl font-bold text-[var(--ocean-sunrise)] mb-1">
                  Nov 3rd
                </div>
                <div className="text-white/70 text-sm">Move Out</div>
              </div>
            </div>

          </div>

          {/* Right Content - Video/Visual */}
          <div className={`lg:w-1/2 mt-12 lg:mt-0 transition-all duration-1000 delay-300 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'}`}>
            <div className="relative">
              
              {/* Main Video/Image Container */}
              <div className="relative bg-white/10 backdrop-blur-sm rounded-3xl p-8 border border-white/20">
                {campaign.featured_video_url && extractVideoId(campaign.featured_video_url) ? (
                  // Video embed
                  <div className="w-full h-96 rounded-2xl overflow-hidden bg-black">
                    <iframe
                      src={`https://www.youtube.com/embed/${extractVideoId(campaign.featured_video_url)}?controls=1&modestbranding=1&rel=0`}
                      className="w-full h-full"
                      frameBorder="0"
                      allowFullScreen
                      title="Matthew's Journey to Independence"
                      allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                    />
                  </div>
                ) : campaign.featured_image ? (
                  // Image fallback
                  <img 
                    src={campaign.featured_image} 
                    alt="Matthew Raynor - The final step to independence"
                    className="w-full h-96 object-cover rounded-2xl"
                  />
                ) : (
                  // Default fallback
                  <div className="w-full h-96 bg-gradient-to-br from-white/20 to-white/5 rounded-2xl flex flex-col items-center justify-center text-white">
                    <div className="text-6xl mb-4">üè†</div>
                    <h3 className="text-2xl font-bold mb-2">The Last Mile</h3>
                    <p className="text-white/80 text-center max-w-xs">
                      From nursing home to independence ‚Äî the final step of a two-year journey
                    </p>
                  </div>
                )}
              </div>

              {/* Floating Elements */}
              <div className="absolute -top-6 -right-6 bg-[var(--ocean-sunrise)] rounded-2xl p-4 animate-pulse-slow">
                <Home className="w-8 h-8 text-white" />
              </div>
              
              <div className="absolute -bottom-6 -left-6 bg-white/20 backdrop-blur-sm rounded-2xl p-4 border border-white/30">
                <div className="text-white text-sm font-medium">November 3rd</div>
                <div className="text-white/70 text-xs">Move-out day</div>
              </div>
            </div>
          </div>

        </div>
      </div>

      {/* Scroll Indicator */}
      <div className="absolute bottom-8 left-1/2 transform -translate-x-1/2 animate-bounce">
        <button 
          onClick={() => document.getElementById('progress')?.scrollIntoView({ behavior: 'smooth' })}
          className="text-white/60 hover:text-white transition-colors"
        >
          <ArrowDown className="w-6 h-6" />
        </button>
      </div>

      {/* Wave Transition */}
      <div className="absolute bottom-0 left-0 w-full h-24 bg-gradient-to-t from-white to-transparent"></div>
    </section>
  );
};

export default HeroSection;

# ==== src/components/sections/ProgressSection.tsx ====

import React, { useState, useEffect, useRef } from 'react';
import { Target, TrendingUp, Users, Calendar } from 'lucide-react';
import type { Campaign } from '../../types/index';

interface ProgressSectionProps {
  campaign: Campaign;
}

const ProgressSection: React.FC<ProgressSectionProps> = ({ campaign }) => {
  const [isVisible, setIsVisible] = useState(false);
  const [animatedProgress, setAnimatedProgress] = useState(0);
  const [animatedAmount, setAnimatedAmount] = useState(0);
  const sectionRef = useRef<HTMLDivElement>(null);

  // Intersection Observer for mobile
  useEffect(() => {
    const isMobile = window.innerWidth <= 768;
    
    const observer = new IntersectionObserver(
      ([entry]) => {
        console.log('üîç Progress section intersection:', entry.isIntersecting, entry.intersectionRatio);
        
        if (entry.isIntersecting) {
          setIsVisible(true);
          const delay = isMobile ? 100 : 200;
          setTimeout(() => {
            animateProgress();
            animateAmount();
          }, delay);
        }
      },
      { 
        threshold: isMobile ? 0.05 : 0.3,
        rootMargin: isMobile ? '100px 0px' : '50px 0px'
      }
    );

    if (sectionRef.current) {
      observer.observe(sectionRef.current);
      console.log('üîç Progress section observer attached');
    }

    // Fallback timer
    const fallbackTimer = setTimeout(() => {
      if (!isVisible) {
        console.log('üîß Fallback: Triggering progress animations');
        setIsVisible(true);
        animateProgress();
        animateAmount();
      }
    }, 2000);

    return () => {
      observer.disconnect();
      clearTimeout(fallbackTimer);
    };
  }, [isVisible]);

  const animateProgress = () => {
    const duration = 2000;
    const steps = 60;
    const increment = campaign.progress_percentage / steps;
    const stepDuration = duration / steps;
    
    let current = 0;
    const timer = setInterval(() => {
      current += increment;
      if (current >= campaign.progress_percentage) {
        setAnimatedProgress(campaign.progress_percentage);
        clearInterval(timer);
      } else {
        setAnimatedProgress(current);
      }
    }, stepDuration);
  };

  const animateAmount = () => {
    const duration = 2000;
    const steps = 60;
    const increment = campaign.current_amount / steps;
    const stepDuration = duration / steps;
    
    let current = 0;
    const timer = setInterval(() => {
      current += increment;
      if (current >= campaign.current_amount) {
        setAnimatedAmount(campaign.current_amount);
        clearInterval(timer);
      } else {
        setAnimatedAmount(Math.floor(current));
      }
    }, stepDuration);
  };

  const remainingAmount = campaign.goal_amount - campaign.current_amount;

  return (
    <section id="progress" ref={sectionRef} className="section-spacing section-ocean-mist">
      <div className="container-custom">
        
        {/* Section Header */}
        <div className={`text-center mb-16 transition-all duration-1000 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'}`}>
          <div className="inline-flex items-center gap-2 bg-[var(--ocean-blue)]/10 rounded-full px-4 py-2 mb-4">
            <TrendingUp className="w-4 h-4 text-[var(--ocean-blue)]" />
            <span className="text-[var(--ocean-blue)] text-sm font-medium">Independence Progress</span>
          </div>
          
          <h2 className="mb-4">The Last Mile</h2>
          <p className="text-xl text-[var(--ocean-driftwood)] max-w-2xl mx-auto">
            After two years of preparation, I'm 60% through the care process and ready to move out. 
            Your support bridges the final gap while government bureaucracy catches up.
          </p>
        </div>

        {/* Main Progress Card */}
        <div className={`card-ocean max-w-4xl mx-auto mb-12 transition-all duration-1000 delay-200 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'}`}>
          
          {/* Progress Header */}
          <div className="flex flex-col lg:flex-row justify-between items-start lg:items-center mb-8">
            <div>
              <h3 className="text-[var(--ocean-deep)] mb-2">Bridge Funding Progress</h3>
              <p className="text-[var(--ocean-driftwood)]">
                Security blanket for 2-3 months of care during the transition
              </p>
            </div>
            
            <div className="mt-4 lg:mt-0 text-right">
              <div className="text-3xl font-bold text-[var(--ocean-blue)]">
                ${animatedAmount.toLocaleString()}
              </div>
              <div className="text-[var(--ocean-driftwood)] text-sm">
                of ${campaign.goal_amount.toLocaleString()} goal
              </div>
            </div>
          </div>

          {/* Progress Bar */}
          <div className="mb-8">
            <div className="flex justify-between items-center mb-3">
              <span className="text-sm font-medium text-[var(--ocean-deep)]">
                {Math.round(animatedProgress)}% Complete
              </span>
              <span className="text-sm text-[var(--ocean-driftwood)]">
                ${remainingAmount.toLocaleString()} remaining
              </span>
            </div>
            
            <div className="progress-ocean">
              <div 
                className="progress-ocean-fill"
                style={{ width: `${animatedProgress}%` }}
              />
            </div>
          </div>

          {/* Impact Statement */}
          <div className="bg-[var(--ocean-mist)] rounded-xl p-6">
            <div className="flex items-start gap-4">
              <Target className="w-6 h-6 text-[var(--ocean-blue)] mt-1 flex-shrink-0" />
              <div>
                <h4 className="text-[var(--ocean-deep)] mb-2">What This Funding Achieves</h4>
                <p className="text-[var(--ocean-driftwood)] mb-4">
                  This bridge funding ensures I can move out on November 3rd with confidence, knowing I'll have 
                  the care support I need while the government finishes processing caregiver registrations. 
                  It's the final piece that makes independence possible.
                </p>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="flex items-center gap-2">
                    <div className="w-2 h-2 bg-[var(--ocean-blue)] rounded-full"></div>
                    <span className="text-sm text-[var(--ocean-driftwood)]">2-3 months of care coverage</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <div className="w-2 h-2 bg-[var(--ocean-teal)] rounded-full"></div>
                    <span className="text-sm text-[var(--ocean-driftwood)]">Security during government processing</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <div className="w-2 h-2 bg-[var(--ocean-seafoam)] rounded-full"></div>
                    <span className="text-sm text-[var(--ocean-driftwood)]">Use of renovated accessible shower</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <div className="w-2 h-2 bg-[var(--ocean-sunrise)] rounded-full"></div>
                    <span className="text-sm text-[var(--ocean-driftwood)]">Freedom to enjoy Hampton Bays</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Stats Grid */}
        <div className={`grid grid-cols-1 md:grid-cols-3 gap-6 transition-all duration-1000 delay-400 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'}`}>
          
          {/* Preparation Time */}
          <div className="card-ocean text-center">
            <div className="w-12 h-12 bg-[var(--ocean-blue)]/10 rounded-full flex items-center justify-center mx-auto mb-4">
              <Calendar className="w-6 h-6 text-[var(--ocean-blue)]" />
            </div>
            <div className="text-2xl font-bold text-[var(--ocean-deep)] mb-2">
              2 Years
            </div>
            <div className="text-[var(--ocean-driftwood)] text-sm">
              Preparation Time
            </div>
          </div>

          {/* Care Process */}
          <div className="card-ocean text-center">
            <div className="w-12 h-12 bg-[var(--ocean-teal)]/10 rounded-full flex items-center justify-center mx-auto mb-4">
              <Users className="w-6 h-6 text-[var(--ocean-teal)]" />
            </div>
            <div className="text-2xl font-bold text-[var(--ocean-deep)] mb-2">
              60%
            </div>
            <div className="text-[var(--ocean-driftwood)] text-sm">
              Care Process Complete
            </div>
          </div>

          {/* Move Out Date */}
          <div className="card-ocean text-center">
            <div className="w-12 h-12 bg-[var(--ocean-sunrise)]/10 rounded-full flex items-center justify-center mx-auto mb-4">
              <Target className="w-6 h-6 text-[var(--ocean-sunrise)]" />
            </div>
            <div className="text-2xl font-bold text-[var(--ocean-deep)] mb-2">
              Nov 3rd
            </div>
            <div className="text-[var(--ocean-driftwood)] text-sm">
              Move-Out Date
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default ProgressSection;

# ==================== Styles ====================



# ==== src/App.css ====

#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}


# ==== src/index.css ====

@tailwind base;
@tailwind components;
@tailwind utilities;

/* Ocean Theme CSS Variables */
:root {
  --ocean-deep: #0F172A;
  --ocean-blue: #1E40AF;
  --ocean-teal: #0891B2;
  --ocean-seafoam: #06B6D4;
  --ocean-mist: #F0F9FF;
  --ocean-sunrise: #F59E0B;
  --ocean-coral: #EF4444;
  --ocean-driftwood: #6B7280;
}

/* Reset and base styles */
* {
  box-sizing: border-box;
}

html, body, #root {
  height: 100%;
  margin: 0;
  padding: 0;
}

body {
  margin: 0;
  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1.6;
  color: var(--ocean-deep);
  background-color: #ffffff;
}

/* Typography Scale */
h1, h2, h3, h4, h5, h6 {
  font-weight: 700;
  line-height: 1.2;
  margin-bottom: 1rem;
  color: var(--ocean-deep);
}

h1 {
  font-size: 4rem; /* 64px */
  font-weight: 800;
}

h2 {
  font-size: 3rem; /* 48px */
}

h3 {
  font-size: 2rem; /* 32px */
}

h4 {
  font-size: 1.5rem; /* 24px */
}

p {
  font-size: 1.125rem; /* 18px */
  line-height: 1.6;
  margin-bottom: 1.5rem;
  color: var(--ocean-driftwood);
}

/* Mobile Typography */
@media (max-width: 768px) {
  h1 {
    font-size: 3rem; /* 48px */
  }
  
  h2 {
    font-size: 2.25rem; /* 36px */
  }
  
  h3 {
    font-size: 1.5rem; /* 24px */
  }
  
  h4 {
    font-size: 1.25rem; /* 20px */
  }
  
  p {
    font-size: 1rem; /* 16px */
  }
}

/* Layout Spacing System */
.section-spacing {
  padding: 5rem 0; /* 80px */
}

.container-custom {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 1rem;
}

@media (min-width: 640px) {
  .container-custom {
    padding: 0 1.5rem;
  }
}

@media (min-width: 1024px) {
  .container-custom {
    padding: 0 2rem;
  }
}

/* Custom component classes */
@layer components {
  .btn-ocean-primary {
    @apply bg-[var(--ocean-blue)] hover:bg-[var(--ocean-teal)] text-white font-semibold py-4 px-8 rounded-2xl transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100;
  }
  
  .btn-ocean-secondary {
    @apply bg-white hover:bg-[var(--ocean-mist)] text-[var(--ocean-blue)] font-semibold py-4 px-8 rounded-2xl border-2 border-[var(--ocean-blue)] hover:border-[var(--ocean-teal)] transition-all duration-300 shadow-md hover:shadow-lg;
  }
  
  .card-ocean {
    @apply bg-white rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 p-8 border-0;
  }
  
  .card-ocean:hover {
    transform: translateY(-4px);
  }
  
  .progress-ocean {
    @apply bg-gray-200 rounded-full h-3 overflow-hidden;
  }
  
  .progress-ocean-fill {
    @apply h-full rounded-full bg-gradient-to-r from-[var(--ocean-blue)] to-[var(--ocean-teal)] transition-all duration-1000 ease-out;
  }
  
  .input-ocean {
    @apply w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-[var(--ocean-blue)] focus:border-transparent text-lg bg-white;
  }
  
  .hero-ocean {
    @apply bg-gradient-to-br from-[var(--ocean-deep)] via-[var(--ocean-blue)] to-[var(--ocean-teal)] text-white;
  }
  
  .section-ocean-mist {
    @apply bg-[var(--ocean-mist)];
  }
  
  .text-ocean-primary {
    @apply text-[var(--ocean-blue)];
  }
  
  .text-ocean-secondary {
    @apply text-[var(--ocean-teal)];
  }
  
  .text-ocean-accent {
    @apply text-[var(--ocean-sunrise)];
  }
}

/* Custom animations */
@keyframes pulse-slow {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0.5;
  }
}

@keyframes wave-slide {
  0% {
    transform: translateX(-100%);
  }
  100% {
    transform: translateX(100%);
  }
}

@keyframes count-up {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.animate-pulse-slow {
  animation: pulse-slow 3s cubic-bezier(0.4, 0, 0.6, 1) infinite;
}

.animate-wave-slide {
  animation: wave-slide 3s ease-in-out infinite;
}

.animate-count-up {
  animation: count-up 0.8s ease-out forwards;
}

/* Smooth scrolling */
html {
  scroll-behavior: smooth;
}

/* Focus styles for accessibility */
button:focus,
input:focus,
textarea:focus,
select:focus {
  outline: 2px solid var(--ocean-blue);
  outline-offset: 2px;
}

/* Mobile touch targets */
@media (max-width: 768px) {
  button,
  .btn-ocean-primary,
  .btn-ocean-secondary {
    min-height: 44px;
    min-width: 44px;
  }
  
  .input-ocean {
    min-height: 44px;
  }
}

/* Loading states */
.loading-skeleton {
  @apply bg-gray-200 animate-pulse rounded;
}

.loading-skeleton::after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
  animation: wave-slide 1.5s infinite;
}

/* Utility classes for ocean theme */
.bg-ocean-gradient {
  background: linear-gradient(135deg, var(--ocean-deep) 0%, var(--ocean-blue) 50%, var(--ocean-teal) 100%);
}

.bg-ocean-wave {
  background: linear-gradient(45deg, var(--ocean-mist) 0%, var(--ocean-seafoam) 100%);
}

.text-shadow-ocean {
  text-shadow: 2px 2px 4px rgba(15, 23, 42, 0.3);
}

/* Responsive image handling */
img {
  max-width: 100%;
  height: auto;
}

/* Custom scrollbar */
::-webkit-scrollbar {
  width: 8px;
}

::-webkit-scrollbar-track {
  background: var(--ocean-mist);
}

::-webkit-scrollbar-thumb {
  background: var(--ocean-blue);
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: var(--ocean-teal);
}

# ==================== Other Files ====================



# ==== ./index.html ====

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    
    <!-- Basic SEO -->
    <meta name="description" content="Help Matt secure accessible housing and continue his journey as a quadriplegic developer. From commercial fisherman to self-taught programmer - your support makes the difference." />
    <meta name="keywords" content="fundraiser, disability, accessibility, developer, quadriplegic, inspiring story, donation, accessible housing" />
    <meta name="author" content="Matt Raynor" />
    
    <!-- Favicon -->
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Matt Freedom Fundraiser - From Sea to Source Code</title>
    
    <!-- Open Graph Meta Tags (Facebook, LinkedIn) -->
    <meta property="og:site_name" content="Matt Freedom Fundraiser" />
    <meta property="og:title" content="Matt Freedom Fundraiser - From Sea to Source Code" />
    <meta property="og:description" content="Help Matt secure accessible housing and continue his journey as a quadriplegic developer. From commercial fisherman to self-taught programmer - your support makes the difference." />
    <meta property="og:image" content="https://mattsfreedomfundraiser.com/og-image-v2.jpg" />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:image:alt" content="Matt Raynor fundraising campaign - accessible housing for disabled developer" />
    <meta property="og:url" content="https://mattsfreedomfundraiser.com" />
    <meta property="og:type" content="website" />
    <meta property="og:locale" content="en_US" />
    
    <!-- Twitter Cards -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@mattfreedomfund" />
    <meta name="twitter:creator" content="@mattfreedomfund" />
    <meta name="twitter:title" content="Matt Freedom Fundraiser - From Sea to Source Code" />
    <meta name="twitter:description" content="Help Matt secure accessible housing and continue his journey as a quadriplegic developer. Your support makes the difference." />
    <meta property="twitter:image" content="https://mattsfreedomfundraiser.com/og-image-v2.jpg" />
    <meta name="twitter:image:alt" content="Matt Raynor fundraising campaign - accessible housing for disabled developer" />
    
    <!-- Additional Meta -->
    <meta name="theme-color" content="#1E40AF" />
    <link rel="canonical" href="https://mattsfreedomfundraiser.com" />
    
    <!-- Google Identity Services -->
    <script src="https://accounts.google.com/gsi/client" async defer></script>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

# ==== ./project_structure.txt ====

.
‚îú‚îÄ‚îÄ public
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ android-chrome-192x192.png
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ android-chrome-512x512.png
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ apple-touch-icon.png
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ favicon-16x16.png
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ favicon-32x32.png
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ favicon.ico
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ site.webmanifest
‚îú‚îÄ‚îÄ scripts
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ front_export.py
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ frontend_code_snapshot.txt
‚îú‚îÄ‚îÄ src
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ assets
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ react.svg
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ components
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ sections
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ DonationSection.tsx
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ HeroSection.tsx
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ProgressSection.tsx
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ SupportersSection.tsx
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ UpdatesSection.tsx
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ CampaignPage.tsx
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ErrorBoundary.tsx
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ SocialAuth.tsx
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ UserMenu.tsx
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ hooks
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ useAuth.ts
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ services
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ api.ts
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ types
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ index.ts
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ App.css
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ App.tsx
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index.css
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ main.tsx
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ vite-env.d.ts
‚îú‚îÄ‚îÄ .env.local
‚îú‚îÄ‚îÄ .env.production
‚îú‚îÄ‚îÄ .gitignore
‚îú‚îÄ‚îÄ eslint.config.js
‚îú‚îÄ‚îÄ index.html
‚îú‚îÄ‚îÄ netlify.toml
‚îú‚îÄ‚îÄ package-lock.json
‚îú‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ postcss.config.js
‚îú‚îÄ‚îÄ project_structure.txt
‚îú‚îÄ‚îÄ project-structure.txt
‚îú‚îÄ‚îÄ README.md
‚îú‚îÄ‚îÄ tailwind.config.js
‚îú‚îÄ‚îÄ tsconfig.app.json
‚îú‚îÄ‚îÄ tsconfig.json
‚îú‚îÄ‚îÄ tsconfig.node.json
‚îî‚îÄ‚îÄ vite.config.ts

10 directories, 44 files


# ==== ./README.md ====

# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config({
  extends: [
    // Remove ...tseslint.configs.recommended and replace with this
    ...tseslint.configs.recommendedTypeChecked,
    // Alternatively, use this for stricter rules
    ...tseslint.configs.strictTypeChecked,
    // Optionally, add this for stylistic rules
    ...tseslint.configs.stylisticTypeChecked,
  ],
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config({
  plugins: {
    // Add the react-x and react-dom plugins
    'react-x': reactX,
    'react-dom': reactDom,
  },
  rules: {
    // other rules...
    // Enable its recommended typescript rules
    ...reactX.configs['recommended-typescript'].rules,
    ...reactDom.configs.recommended.rules,
  },
})
```


# ==== ./.gitignore ====

# Environment Variables (CRITICAL - contains API keys)
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Dependencies
node_modules/
/.pnp
.pnp.js

# Production build
/dist
/build

# Development
.vite/

# IDE files
.vscode/
.idea/
*.swp
*.swo
*~

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/
*.lcov

# nyc test coverage
.nyc_output

# ESLint cache
.eslintcache

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next

# Nuxt.js build / generate output
.nuxt
dist

# Storybook build outputs
.out
.storybook-out

# Temporary folders
tmp/
temp/