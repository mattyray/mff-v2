# FRONTEND CODE SNAPSHOT
# Generated for AI Face Swap App
# Total files: 29



# ==================== Configuration Files ====================



# ==== src/vite-env.d.ts ====

/// <reference types="vite/client" />




# ==== src/types/index.ts ====

export interface FaceSwapResult {
  id: number;
  match_name: string;
  match_score: number;
  message: string;
  output_image_url: string;
  original_selfie_url: string;
  historical_figure_url: string;
  is_randomized?: boolean;
  usage?: UsageData | null;
}

export interface ApiError {
  error: string;
  message?: string;
  feature_type?: 'match' | 'randomize';
  usage?: UsageData;
  registration_required?: boolean;
}

export type ProgressStep = 'uploading' | 'analyzing' | 'matching' | 'swapping' | 'complete';

export interface UploadProgress {
  step: ProgressStep;
  progress: number;
  message: string;
}

export interface HistoricalFigure {
  name: string;
  description: string;
  imageUrl: string;
  confidence?: number;
}

// NEW - Usage tracking types
export interface UsageData {
  matches_used: number;
  matches_limit: number;
  randomizes_used: number;
  randomizes_limit: number;
  can_match: boolean;
  can_randomize: boolean;
  is_limited: boolean;
  unlimited?: boolean;
  user_authenticated?: boolean;
}

export interface UsageLimitError extends ApiError {
  usage: UsageData;
  registration_required: true;
}



# ==== src/hooks/useAuth.ts ====

// src/hooks/useAuth.ts
import { useState, useEffect, useCallback } from 'react';
import { FaceSwapAPI } from '../services/api';

interface User {
  id: number;
  email: string;
  first_name: string;
  last_name: string;
}

interface UseAuthReturn {
  user: User | null;
  isAuthenticated: boolean;
  loading: boolean;
  error: string | null;
  login: (token: string, userData: User) => void;
  logout: () => Promise<void>;
  checkAuthStatus: () => Promise<void>;
  clearError: () => void;
}

export const useAuth = (): UseAuthReturn => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const checkAuthStatus = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      
      const token = localStorage.getItem('authToken');
      if (!token) {
        setUser(null);
        return;
      }

      // Verify token is still valid by getting user info
      const userData = await FaceSwapAPI.refreshUserSession();
      setUser(userData);
    } catch (err) {
      console.log('Auth check failed:', err);
      // Clear invalid token
      localStorage.removeItem('authToken');
      setUser(null);
      setError(err instanceof Error ? err.message : 'Authentication failed');
    } finally {
      setLoading(false);
    }
  }, []);

  const login = useCallback((token: string, userData: User) => {
    localStorage.setItem('authToken', token);
    setUser(userData);
    setError(null);
    console.log('‚úÖ User logged in:', userData.email);
  }, []);

  const logout = useCallback(async () => {
    try {
      await FaceSwapAPI.logout();
    } catch (err) {
      console.error('Logout API call failed:', err);
      // Continue with logout even if API call fails
    } finally {
      localStorage.removeItem('authToken');
      setUser(null);
      setError(null);
      console.log('‚úÖ User logged out');
    }
  }, []);

  const clearError = useCallback(() => {
    setError(null);
  }, []);

  // Check auth status on mount
  useEffect(() => {
    checkAuthStatus();
  }, [checkAuthStatus]);

  return {
    user,
    isAuthenticated: !!user,
    loading,
    error,
    login,
    logout,
    checkAuthStatus,
    clearError,
  };
};



# ==== src/services/api.ts ====

import axios from 'axios';
import type { FaceSwapResult, ApiError, UsageData, UsageLimitError } from '../types/index';

// Read from environment variables
const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://127.0.0.1:8002';

console.log('üîß Environment check:');
console.log('  - API_BASE_URL:', API_BASE_URL);

const api = axios.create({
  baseURL: API_BASE_URL,
  timeout: 300000,
  withCredentials: true, // Include cookies for session management
});

// üî• FIXED: Add request interceptor to include auth token in headers
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('authToken');
    if (token) {
      config.headers.Authorization = `Token ${token}`;
      console.log('üîë Adding auth token to request:', config.url);
    }
    return config;
  },
  (error) => {
    console.error('‚ùå Request interceptor error:', error);
    return Promise.reject(error);
  }
);

// Add response interceptor for error handling
api.interceptors.response.use(
  (response) => response,
  (error) => {
    console.error(`‚ùå API Error: ${error.response?.status}`, error.response?.data);
    return Promise.reject(error);
  }
);

export class FaceSwapAPI {
  static async generateFaceSwap(
    selfieFile: File,
    onProgress?: (progress: number) => void
  ): Promise<FaceSwapResult> {
    const formData = new FormData();
    formData.append('selfie', selfieFile);

    try {
      const response = await api.post<FaceSwapResult>('/api/imagegen/generate/', formData, {
        headers: { 'Content-Type': 'multipart/form-data' },
        onUploadProgress: (progressEvent) => {
          if (progressEvent.total && onProgress) {
            const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);
            onProgress(progress);
          }
        },
      });
      return response.data;
    } catch (error) {
      throw this.handleApiError(error);
    }
  }

  static async randomizeFaceSwap(
    selfieFile: File,
    onProgress?: (progress: number) => void
  ): Promise<FaceSwapResult> {
    const formData = new FormData();
    formData.append('selfie', selfieFile);

    try {
      const response = await api.post<FaceSwapResult>('/api/imagegen/randomize/', formData, {
        headers: { 'Content-Type': 'multipart/form-data' },
        onUploadProgress: (progressEvent) => {
          if (progressEvent.total && onProgress) {
            const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);
            onProgress(progress);
          }
        },
      });
      return response.data;
    } catch (error) {
      throw this.handleApiError(error);
    }
  }

  static async getUsageStatus(): Promise<UsageData> {
    try {
      const response = await api.get<UsageData>('/api/imagegen/usage/');
      return response.data;
    } catch (error) {
      throw new Error('Failed to check usage status');
    }
  }

  static async getImageStatus(id: number): Promise<FaceSwapResult> {
    try {
      const response = await api.get<FaceSwapResult>(`/api/imagegen/status/${id}/`);
      return response.data;
    } catch (error) {
      throw new Error('Failed to check image status');
    }
  }

  static async testConnection(): Promise<boolean> {
    try {
      await api.get('/health/');
      return true;
    } catch (error) {
      return false;
    }
  }

  // üî• NEW: Google Authentication
  static async googleAuth(credential: string, userInfo: any) {
    try {
      console.log('üîë Sending Google auth request...');
      const response = await api.post('/api/accounts/auth/google/', { 
        credential: credential,
        user_info: userInfo
      });
      console.log('‚úÖ Google auth successful:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Google auth failed:', error);
      throw this.handleApiError(error);
    }
  }

  // üî• NEW: Facebook Authentication
  static async facebookAuth(accessToken: string, userInfo: any) {
    try {
      console.log('üîë Sending Facebook auth request...');
      const response = await api.post('/api/accounts/auth/facebook/', { 
        access_token: accessToken,
        user_info: userInfo
      });
      console.log('‚úÖ Facebook auth successful:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Facebook auth failed:', error);
      throw this.handleApiError(error);
    }
  }

  // üî• NEW: Refresh User Session
  static async refreshUserSession() {
    try {
      const response = await api.get('/api/accounts/me/');
      return response.data;
    } catch (error) {
      throw this.handleApiError(error);
    }
  }

  // üî• NEW: Email/Password Signup (for future use)
  static async signUp(email: string, password: string, firstName?: string, lastName?: string) {
    try {
      const response = await api.post('/api/accounts/signup/', {
        email,
        password,
        first_name: firstName || '',
        last_name: lastName || ''
      });
      return response.data;
    } catch (error) {
      throw this.handleApiError(error);
    }
  }

  // üî• NEW: Email/Password Login (for future use)
  static async login(email: string, password: string) {
    try {
      const response = await api.post('/api/accounts/login/', {
        email,
        password
      });
      return response.data;
    } catch (error) {
      throw this.handleApiError(error);
    }
  }

  // üî• NEW: Logout
  static async logout() {
    try {
      await api.post('/api/accounts/logout/');
      // Clear local storage
      localStorage.removeItem('authToken');
      return true;
    } catch (error) {
      console.error('Logout error:', error);
      // Clear local storage even if API call fails
      localStorage.removeItem('authToken');
      return false;
    }
  }

  private static handleApiError(error: unknown): Error {
    if (axios.isAxiosError(error)) {
      if (error.code === 'ECONNREFUSED') {
        throw new Error('Cannot connect to server. Make sure the backend is running.');
      }
      
      if (error.response?.status === 429) {
        const errorData = error.response.data as UsageLimitError;
        const usageLimitError = new Error(errorData.message || 'Usage limit reached') as Error & UsageLimitError;
        usageLimitError.usage = errorData.usage;
        usageLimitError.registration_required = errorData.registration_required;
        usageLimitError.feature_type = errorData.feature_type;
        throw usageLimitError;
      }
      
      // Handle authentication errors
      if (error.response?.status === 401) {
        const errorData = error.response.data as ApiError;
        throw new Error(errorData.error || 'Authentication failed');
      }
      
      if (error.response?.data) {
        const apiError = error.response.data as ApiError;
        throw new Error(apiError.error || `Server error: ${error.response.status}`);
      }
    }
    
    throw new Error('Network error. Please check your connection and try again.');
  }
}

export default api;




# ==== ./tsconfig.node.json ====

{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}




# ==== ./tailwind.config.js ====

/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#eff6ff',
          100: '#dbeafe',
          200: '#bfdbfe',
          300: '#93c5fd',
          400: '#60a5fa',
          500: '#3b82f6',
          600: '#2563eb',
          700: '#1d4ed8',
          800: '#1e40af',
          900: '#1e3a8a',
        }
      },
      animation: {
        'pulse-slow': 'pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite',
      }
    },
  },
  plugins: [],
}



# ==== ./netlify.toml ====

[build]
  command = "npm run build"
  publish = "dist"

# Fix SPA routing
[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200

# Fix MIME types
[[headers]]
  for = "*.js"
  [headers.values]
    Content-Type = "application/javascript; charset=utf-8"

[[headers]]
  for = "*.mjs"
  [headers.values]
    Content-Type = "application/javascript; charset=utf-8"

[[headers]]
  for = "*.css"
  [headers.values]
    Content-Type = "text/css; charset=utf-8"

# Cache assets
[[headers]]
  for = "/assets/*"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"



# ==== ./tsconfig.app.json ====

{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}




# ==== ./package.json ====

{
  "name": "frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "axios": "^1.10.0",
    "lucide-react": "^0.516.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-dropzone": "^14.3.8"
  },
  "devDependencies": {
    "@eslint/js": "^9.25.0",
    "@flydotio/dockerfile": "^0.7.10",
    "@types/react": "^19.1.2",
    "@types/react-dom": "^19.1.2",
    "@vitejs/plugin-react": "^4.6.0",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.25.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^16.0.0",
    "postcss": "^8.5.6",
    "tailwindcss": "^3.4.17",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.30.1",
    "vite": "^6.3.5"
  }
}




# ==== ./fly.toml ====

# fly.toml app configuration file generated for frontend-delicate-pine-6591 on 2025-06-17T18:14:08-04:00
#
# See https://fly.io/docs/reference/configuration/ for information about how to use this file.
#

app = 'frontend-delicate-pine-6591'
primary_region = 'ewr'

[build]

[http_service]
  internal_port = 80
  force_https = true
  auto_stop_machines = 'stop'
  auto_start_machines = true
  min_machines_running = 0
  processes = ['app']

[[vm]]
  memory = '1gb'
  cpu_kind = 'shared'
  cpus = 1




# ==== ./tsconfig.json ====

{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}




# ==== ./eslint.config.js ====

import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)




# ==== ./vite.config.ts ====

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
  server: {
    port: 5173,
    host: true,
    open: true
  },
  css: {
    postcss: './postcss.config.js'
  },
  build: {
    outDir: 'dist',
    sourcemap: true
  }
})



# ==== ./postcss.config.js ====

export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}



# ==================== Main React Files ====================



# ==== src/App.tsx ====

import { History } from 'lucide-react';
import ProcessingStatus from './components/ProcessingStatus';
import ResultDisplay from './components/ResultDisplay';
import RegistrationGate from './components/RegistrationGate';
import UploadSection from './components/UploadSection';
import ErrorDisplay from './components/ErrorDisplay';
import UserMenu from './components/UserMenu';
import { useUsage } from './hooks/useUsage';
import { useFileUpload } from './hooks/useFileUpload';
import { useProcessing } from './hooks/useProcessing';
import { useRegistrationGate } from './hooks/useRegistrationGate';
import { useAuth } from './hooks/useAuth';

function App() {
  // üéØ Custom Hooks handle all the complexity
  const { usage, loading: usageLoading, checkUsage } = useUsage();
  const { isAuthenticated, checkAuthStatus } = useAuth();
  
  const { 
    selectedFile, 
    handleFileSelect, 
    handleClearFile, 
    error: fileError 
  } = useFileUpload();
  
  // üî• Updated: Enhanced registration gate callback
  const handleUsageLimitReached = (usageLimitError: any) => {
    // Only show registration gate if user is not authenticated
    if (!isAuthenticated) {
      showRegistrationGate(usageLimitError);
    }
  };
  
  const {
    isProcessing,
    processing,
    result,
    error: processingError,
    startProcessing,
    clearResult,
    clearError
  } = useProcessing(handleUsageLimitReached);
  
  const {
    isOpen: showRegistrationModal,
    lastFeatureAttempted,
    showRegistrationGate,
    hideRegistrationGate,
    handleSignUp,
    handleLogin,
    canUseFeature
  } = useRegistrationGate(() => {
    checkUsage();
    checkAuthStatus();
  });

  // üéØ Unified error handling
  const currentError = fileError || processingError;

  // üéØ Event Handlers
  const handleFileSelectWrapper = (file: File) => {
    handleFileSelect(file);
    if (currentError) {
      clearError();
    }
  };

  const handleClearFileWrapper = () => {
    handleClearFile();
    clearResult();
    clearError();
  };

  const handleStartProcessing = async (isRandomize = false) => {
    if (!selectedFile) return;
    
    try {
      await startProcessing(selectedFile, isRandomize);
      checkUsage(); // Refresh usage after successful operation
    } catch (error) {
      // Error handling is done in the useProcessing hook
      console.error('Processing failed:', error);
    }
  };

  const handleRegularMatch = () => handleStartProcessing(false);
  const handleRandomize = () => handleStartProcessing(true);

  const handleTryAgain = () => {
    handleClearFileWrapper();
  };

  // üéØ Render main content based on processing state
  const renderContent = () => {
    if (isProcessing) {
      return (
        <div className="max-w-xl mx-auto">
          <ProcessingStatus
            step={processing.step}
            progress={processing.progress}
            message={processing.message}
            matchedFigure={processing.matchedFigure}
          />
        </div>
      );
    }

    if (result) {
      return (
        <div className="max-w-4xl mx-auto">
          <ResultDisplay
            result={result}
            onTryAgain={handleTryAgain}
          />
        </div>
      );
    }

    if (currentError) {
      return (
        <ErrorDisplay
          error={currentError}
          onTryAgain={handleTryAgain}
        />
      );
    }

    // Default: Upload screen
    return (
      <UploadSection
        selectedFile={selectedFile}
        onFileSelect={handleFileSelectWrapper}
        onClearFile={handleClearFileWrapper}
        onRegularMatch={handleRegularMatch}
        onRandomize={handleRandomize}
        onShowRegistrationGate={showRegistrationGate}
        canUseMatch={isAuthenticated ? true : canUseFeature('match', usage)}
        usage={usage}
        usageLoading={usageLoading}
      />
    );
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
      {/* Header */}
      <header className="bg-white/80 backdrop-blur-sm border-b border-gray-200 sticky top-0 z-10">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="bg-gradient-to-r from-blue-500 to-purple-500 rounded-lg p-2">
                <History className="w-6 h-6 text-white" />
              </div>
              <div>
                <h1 className="text-xl font-bold text-gray-900">HistoryFace</h1>
                <p className="text-sm text-gray-500">AI Historical Transformation</p>
              </div>
            </div>
            
            <div className="flex items-center gap-4">
              {/* Usage Summary - only show for non-authenticated users */}
              {!isAuthenticated && usage && !usage.unlimited && !usageLoading && (
                <div className="hidden sm:flex items-center gap-3 text-sm text-gray-600">
                  <span>Matches: {usage.matches_used}/{usage.matches_limit}</span>
                  <span>‚Ä¢</span>
                  <span>Randomizes: {usage.randomizes_used}/{usage.randomizes_limit}</span>
                </div>
              )}
              
              {/* Authenticated user gets unlimited indicator */}
              {isAuthenticated && (
                <div className="hidden sm:flex items-center gap-2 text-sm text-green-600">
                  <span className="w-2 h-2 bg-green-500 rounded-full"></span>
                  <span>Unlimited Access</span>
                </div>
              )}
              
              {(result || currentError) && (
                <button
                  onClick={handleTryAgain}
                  className="text-sm text-gray-600 hover:text-gray-900 transition-colors"
                >
                  ‚Üê Start Over
                </button>
              )}

              {/* User Menu */}
              <UserMenu 
                onShowRegistrationGate={() => showRegistrationGate({
                  error: 'Authentication required',
                  message: 'Sign up to unlock unlimited access',
                  feature_type: 'match',
                  registration_required: true,
                  usage: usage || {
                    matches_used: 0,
                    matches_limit: 1,
                    randomizes_used: 0,
                    randomizes_limit: 1,
                    can_match: true,
                    can_randomize: true,
                    is_limited: false,
                  }
                })}
                onUserStateChange={() => {
                  checkUsage();
                  checkAuthStatus();
                }}
              />
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {renderContent()}
      </main>

      {/* Registration Gate Modal */}
      <RegistrationGate
        isOpen={showRegistrationModal}
        onClose={hideRegistrationGate}
        onSignUp={handleSignUp}
        onLogin={handleLogin}
        usage={usage}
        lastFeatureAttempted={lastFeatureAttempted}
      />

      {/* Footer */}
      <footer className="bg-gray-50 border-t border-gray-200 mt-16">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="text-center">
            <p className="text-gray-600 text-sm">
              Powered by AI face recognition and historical figure matching
            </p>
            <p className="text-gray-500 text-xs mt-2">
              Your photos are processed securely and not stored permanently
            </p>
          </div>
        </div>
      </footer>
    </div>
  );
}

export default App;



# ==== src/main.tsx ====

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import App from './App.tsx'
import ErrorBoundary from './components/ErrorBoundary.tsx'
import './index.css'

console.log('üöÄ main.tsx loading...');

const rootElement = document.getElementById('root');
if (!rootElement) {
  throw new Error('Root element not found');
}

console.log('‚úÖ Root element found, mounting React app...');

createRoot(rootElement).render(
  <StrictMode>
    <ErrorBoundary>
      <App />
    </ErrorBoundary>
  </StrictMode>
);

console.log('‚úÖ React app mounted successfully!');



# ==================== React Components ====================



# ==== src/components/UserMenu.tsx ====

// src/components/UserMenu.tsx
import React, { useState, useRef, useEffect } from 'react';
import { LogOut, Settings, History, ChevronDown } from 'lucide-react';
import { FaceSwapAPI } from '../services/api';

interface UserData {
  id: number;
  email: string;
  first_name: string;
  last_name: string;
}

interface UserMenuProps {
  onShowRegistrationGate: () => void;
  onUserStateChange?: () => void;
}

const UserMenu: React.FC<UserMenuProps> = ({ onShowRegistrationGate, onUserStateChange }) => {
  const [isOpen, setIsOpen] = useState(false);
  const [user, setUser] = useState<UserData | null>(null);
  const [loading, setLoading] = useState(true);
  const dropdownRef = useRef<HTMLDivElement>(null);

  // Check authentication status on mount
  useEffect(() => {
    checkAuthStatus();
  }, []);

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  const checkAuthStatus = async () => {
    try {
      const token = localStorage.getItem('authToken');
      if (!token) {
        setLoading(false);
        return;
      }

      // Try to get user info to verify token is valid
      const userData = await FaceSwapAPI.refreshUserSession();
      setUser(userData);
    } catch (error) {
      console.log('User not authenticated:', error);
      // Clear invalid token
      localStorage.removeItem('authToken');
      setUser(null);
    } finally {
      setLoading(false);
    }
  };

  const handleSignIn = () => {
    onShowRegistrationGate();
    setIsOpen(false);
  };

  const handleLogout = async () => {
    try {
      await FaceSwapAPI.logout();
      setUser(null);
      setIsOpen(false);
      
      // Notify parent about user state change
      if (onUserStateChange) {
        onUserStateChange();
      }
      
      // Refresh page to reset any cached user data
      window.location.reload();
    } catch (error) {
      console.error('Logout error:', error);
      // Force logout even if API call fails
      localStorage.removeItem('authToken');
      setUser(null);
      window.location.reload();
    }
  };

  const getUserInitials = (user: UserData): string => {
    const first = user.first_name?.charAt(0) || '';
    const last = user.last_name?.charAt(0) || '';
    return (first + last).toUpperCase() || user.email?.charAt(0).toUpperCase() || '?';
  };

  const getUserDisplayName = (user: UserData): string => {
    if (user.first_name && user.last_name) {
      return `${user.first_name} ${user.last_name}`;
    }
    if (user.first_name) {
      return user.first_name;
    }
    return user.email;
  };

  // Loading state
  if (loading) {
    return (
      <div className="w-8 h-8 bg-gray-200 rounded-full animate-pulse"></div>
    );
  }

  // Logged out state
  if (!user) {
    return (
      <button
        onClick={handleSignIn}
        className="bg-white hover:bg-gray-50 text-gray-700 font-semibold py-2 px-4 rounded-lg border border-gray-300 hover:border-gray-400 transition-all duration-200 text-sm"
      >
        Sign In
      </button>
    );
  }

  // Logged in state
  return (
    <div className="relative" ref={dropdownRef}>
      {/* User Avatar Button */}
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center gap-2 p-2 rounded-lg hover:bg-gray-100 transition-colors"
      >
        <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-500 rounded-full flex items-center justify-center text-white font-semibold text-sm">
          {getUserInitials(user)}
        </div>
        <ChevronDown 
          size={16} 
          className={`text-gray-500 transition-transform ${isOpen ? 'rotate-180' : ''}`} 
        />
      </button>

      {/* Dropdown Menu */}
      {isOpen && (
        <div className="absolute right-0 mt-2 w-64 bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-50">
          {/* User Info */}
          <div className="px-4 py-3 border-b border-gray-100">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-500 rounded-full flex items-center justify-center text-white font-semibold">
                {getUserInitials(user)}
              </div>
              <div>
                <div className="font-medium text-gray-900">{getUserDisplayName(user)}</div>
                <div className="text-sm text-gray-500">{user.email}</div>
              </div>
            </div>
          </div>

          {/* Menu Items */}
          <div className="py-1">
            <button
              onClick={() => {
                setIsOpen(false);
                // TODO: Navigate to account settings
                alert('Account settings coming soon!');
              }}
              className="w-full flex items-center gap-3 px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors"
            >
              <Settings size={16} />
              Account Settings
            </button>
            
            <button
              onClick={() => {
                setIsOpen(false);
                // TODO: Navigate to transformation history
                alert('Transformation history coming soon!');
              }}
              className="w-full flex items-center gap-3 px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors"
            >
              <History size={16} />
              My Transformations
            </button>
          </div>

          {/* Logout */}
          <div className="border-t border-gray-100 py-1">
            <button
              onClick={handleLogout}
              className="w-full flex items-center gap-3 px-4 py-2 text-sm text-red-600 hover:bg-red-50 transition-colors"
            >
              <LogOut size={16} />
              Sign Out
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default UserMenu;



# ==== src/components/ErrorDisplay.tsx ====

import { AlertCircle } from 'lucide-react';

interface ErrorDisplayProps {
  error: string;
  onTryAgain: () => void;
}

const ErrorDisplay: React.FC<ErrorDisplayProps> = ({ error, onTryAgain }) => {
  return (
    <div className="max-w-xl mx-auto">
      <div className="bg-red-50 border border-red-200 rounded-xl p-8 text-center">
        <div className="flex items-center justify-center mb-4">
          <AlertCircle className="w-12 h-12 text-red-500" />
        </div>
        <h3 className="text-xl font-semibold text-red-900 mb-4">
          Oops! Something went wrong
        </h3>
        <p className="text-red-700 mb-6">
          {error}
        </p>
        <div className="space-y-3">
          <button
            onClick={onTryAgain}
            className="btn-primary w-full"
          >
            Try Again
          </button>
          <p className="text-sm text-red-600">
            Make sure your photo shows a clear face and is under 10MB
          </p>
        </div>
      </div>
    </div>
  );
};

export default ErrorDisplay;



# ==== src/components/SocialAuth.tsx ====

import React, { useEffect, useRef, useState } from 'react';

declare global {
  interface Window {
    google: any;
    FB: any;
    fbReady?: boolean;
    fbSkipped?: boolean;
  }
}

interface SocialAuthProps {
  onGoogleSuccess: (token: string, userInfo: any) => void;
  onFacebookSuccess: (token: string, userInfo: any) => void;
  onError: (error: string) => void;
  disabled?: boolean;
}

const SocialAuth: React.FC<SocialAuthProps> = ({ 
  onGoogleSuccess, 
  onFacebookSuccess, 
  onError,
  disabled = false
}) => {
  const googleButtonRef = useRef<HTMLDivElement>(null);
  const [googleReady, setGoogleReady] = useState(false);
  const [facebookReady, setFacebookReady] = useState(false);
  const [loadingGoogle, setLoadingGoogle] = useState(true);

  // üî• FIXED: Proper VITE_ prefix
  const GOOGLE_CLIENT_ID = import.meta.env.VITE_GOOGLE_CLIENT_ID;
  const FACEBOOK_APP_ID = import.meta.env.VITE_FACEBOOK_APP_ID;
  
  const isLocalhost = window.location.hostname === 'localhost';
  const isHTTPS = window.location.protocol === 'https:';
  const facebookAllowed = isHTTPS || isLocalhost;

  console.log('üîß SSO Debug:', {
    googleClientId: GOOGLE_CLIENT_ID ? `${GOOGLE_CLIENT_ID.substring(0, 20)}...` : 'MISSING',
    facebookAppId: FACEBOOK_APP_ID || 'MISSING',
    protocol: window.location.protocol,
    facebookAllowed,
    googleButtonRef: !!googleButtonRef.current
  });

  // üî• FIXED: Better Google initialization
  useEffect(() => {
    if (!GOOGLE_CLIENT_ID) {
      console.error('‚ùå VITE_GOOGLE_CLIENT_ID missing');
      setLoadingGoogle(false);
      return;
    }

    let attempts = 0;
    const maxAttempts = 50;

    const initGoogle = () => {
      attempts++;
      
      if (window.google?.accounts?.id) {
        try {
          console.log('üîß Initializing Google OAuth...');
          
          window.google.accounts.id.initialize({
            client_id: GOOGLE_CLIENT_ID,
            callback: handleGoogleResponse,
            auto_select: false,
            cancel_on_tap_outside: true,
          });

          // üî• FIXED: Force render after a delay to ensure DOM is ready
          setTimeout(() => {
            if (googleButtonRef.current) {
              try {
                window.google.accounts.id.renderButton(googleButtonRef.current, {
                  theme: 'outline',
                  size: 'large',
                  width: '100%',
                  text: 'continue_with',
                  shape: 'rectangular',
                  logo_alignment: 'left'
                });
                setGoogleReady(true);
                setLoadingGoogle(false);
                console.log('‚úÖ Google button rendered');
              } catch (renderError) {
                console.error('‚ùå Google button render error:', renderError);
                setLoadingGoogle(false);
              }
            } else {
              console.error('‚ùå Google button ref not available');
              setLoadingGoogle(false);
            }
          }, 100);

          console.log('‚úÖ Google OAuth initialized');
          return;
        } catch (error) {
          console.error('‚ùå Google init error:', error);
          setLoadingGoogle(false);
        }
      }

      if (attempts < maxAttempts) {
        setTimeout(initGoogle, 100);
      } else {
        console.error('‚ùå Google SDK failed to load after 5 seconds');
        setLoadingGoogle(false);
        onError('Google authentication unavailable');
      }
    };

    initGoogle();
  }, [GOOGLE_CLIENT_ID]);

  // Initialize Facebook
  useEffect(() => {
    if (!facebookAllowed) {
      console.log('‚ö†Ô∏è Facebook disabled - requires HTTPS');
      return;
    }

    let attempts = 0;
    const checkFB = () => {
      attempts++;
      
      if (window.fbReady && window.FB) {
        setFacebookReady(true);
        console.log('‚úÖ Facebook ready');
        return;
      }

      if (window.fbSkipped) {
        console.log('‚ö†Ô∏è Facebook SDK was skipped');
        return;
      }

      if (attempts < 50) {
        setTimeout(checkFB, 100);
      }
    };

    checkFB();
  }, [facebookAllowed]);

  const handleGoogleResponse = (response: any) => {
    try {
      console.log('üîë Google response:', response);
      
      if (!response.credential) {
        throw new Error('No credential from Google');
      }

      // Parse JWT payload
      const payload = JSON.parse(
        atob(response.credential.split('.')[1].replace(/-/g, '+').replace(/_/g, '/'))
      );
      
      console.log('üë§ Google user:', payload);
      onGoogleSuccess(response.credential, payload);
    } catch (error) {
      console.error('‚ùå Google auth error:', error);
      onError('Google authentication failed');
    }
  };

  const handleGoogleClick = () => {
    if (disabled) return;
    
    try {
      if (window.google?.accounts?.id) {
        window.google.accounts.id.prompt();
      } else {
        throw new Error('Google SDK not loaded');
      }
    } catch (error) {
      console.error('‚ùå Google prompt error:', error);
      onError('Failed to show Google login');
    }
  };

  const handleFacebookClick = () => {
    if (disabled || !facebookReady) return;
    
    if (!facebookAllowed) {
      onError('Facebook login requires HTTPS. Please use Google login instead.');
      return;
    }

    try {
      window.FB.login((response: any) => {
        console.log('üîë Facebook response:', response);
        
        if (response.authResponse) {
          window.FB.api('/me', { fields: 'name,email,first_name,last_name' }, (userInfo: any) => {
            console.log('üë§ Facebook user:', userInfo);
            onFacebookSuccess(response.authResponse.accessToken, userInfo);
          });
        } else {
          console.log('‚ùå Facebook login cancelled or failed');
          onError('Facebook login cancelled');
        }
      }, { scope: 'email,public_profile' });
    } catch (error) {
      console.error('‚ùå Facebook error:', error);
      onError('Facebook authentication failed');
    }
  };

  if (!GOOGLE_CLIENT_ID && !FACEBOOK_APP_ID) {
    return (
      <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
        <p className="text-yellow-800 text-sm">
          ‚ö†Ô∏è Social authentication not configured
        </p>
      </div>
    );
  }

  return (
    <div className="space-y-3">
      {/* Google Login */}
      {GOOGLE_CLIENT_ID && (
        <div className={disabled ? 'opacity-50 pointer-events-none' : ''}>
          {/* üî• FIXED: Always show the div, but conditionally render Google button or fallback */}
          <div ref={googleButtonRef} className="w-full min-h-[48px]" />
          
          {/* üî• FIXED: Fallback button if Google button doesn't render */}
          {!googleReady && !loadingGoogle && (
            <button
              onClick={handleGoogleClick}
              className="w-full flex items-center justify-center gap-3 bg-white border border-gray-300 hover:bg-gray-50 text-gray-700 font-semibold py-3 px-6 rounded-lg transition-colors"
            >
              <svg className="w-5 h-5" viewBox="0 0 24 24">
                <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
              </svg>
              Continue with Google
            </button>
          )}

          {/* Loading state */}
          {loadingGoogle && (
            <div className="w-full flex items-center justify-center py-3 text-gray-500">
              <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-gray-400 mr-2"></div>
              Loading Google...
            </div>
          )}
        </div>
      )}
      
      {/* Facebook Login - Simplified */}
      {FACEBOOK_APP_ID && (
        <button
          onClick={handleFacebookClick}
          disabled={!facebookAllowed || disabled}
          className="w-full flex items-center justify-center gap-3 bg-[#1877F2] hover:bg-[#166FE5] text-white font-semibold py-3 px-6 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
            <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/>
          </svg>
          {!facebookAllowed ? 'Facebook (HTTPS Required)' : 'Continue with Facebook'}
        </button>
      )}

      {/* Development warning */}
      {!facebookAllowed && (
        <p className="text-xs text-amber-600 text-center">
          ‚ö†Ô∏è Facebook requires HTTPS. Google login works on localhost.
        </p>
      )}
    </div>
  );
};

export default SocialAuth;



# ==== src/components/RegistrationGate.tsx ====

import React from 'react';
import { X, Crown, Sparkles, Users, Infinity } from 'lucide-react';
import type { UsageData } from '../types/index';
import SocialAuth from './SocialAuth';
import { FaceSwapAPI } from '../services/api';
import { useAuth } from '../hooks/useAuth';

interface RegistrationGateProps {
  isOpen: boolean;
  onClose: () => void;
  onSignUp: () => void;
  onLogin: () => void;
  usage?: UsageData | null;
  lastFeatureAttempted?: 'match' | 'randomize';
}

const RegistrationGate: React.FC<RegistrationGateProps> = ({
  isOpen,
  onClose,
  usage,
  lastFeatureAttempted
}) => {
  const { login } = useAuth();

  if (!isOpen) return null;

  const getFeatureIcon = (feature?: string) => {
    switch (feature) {
      case 'match': return <Users className="w-6 h-6" />;
      case 'randomize': return <Sparkles className="w-6 h-6" />;
      default: return <Crown className="w-6 h-6" />;
    }
  };

  const handleGoogleSuccess = async (credential: string, userInfo: any) => {
    try {
      console.log('üîë Google auth success:', userInfo);
      const response = await FaceSwapAPI.googleAuth(credential, userInfo);
      
      // üî• FIXED: Store token and update auth state
      localStorage.setItem('authToken', response.token);
      login(response.token, response.user);
      
      // üî• FIXED: Close modal and show success
      onClose();
      
      // üî• FIXED: Reload page to refresh all state
      window.location.reload();
      
    } catch (error) {
      console.error('Google auth failed:', error);
      alert('Google authentication failed. Please try again.');
    }
  };

  const handleFacebookSuccess = async (accessToken: string, userInfo: any) => {
    try {
      console.log('üîë Facebook auth success:', userInfo);
      const response = await FaceSwapAPI.facebookAuth(accessToken, userInfo);
      
      // üî• FIXED: Store token and update auth state
      localStorage.setItem('authToken', response.token);
      login(response.token, response.user);
      
      // üî• FIXED: Close modal and show success
      onClose();
      
      // üî• FIXED: Reload page to refresh all state
      window.location.reload();
      
    } catch (error) {
      console.error('Facebook auth failed:', error);
      alert('Facebook authentication failed. Please try again.');
    }
  };

  const handleSocialAuthError = (error: string) => {
    console.error('Social auth error:', error);
    alert(`Authentication error: ${error}`);
  };

  const handleEmailSignup = () => {
    alert('Email signup coming soon! For now, please use Google.');
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-2xl max-w-md w-full max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="relative bg-gradient-to-r from-blue-600 to-purple-600 text-white p-6 rounded-t-2xl">
          <button
            onClick={onClose}
            className="absolute top-4 right-4 text-white hover:text-gray-200 transition-colors"
          >
            <X size={24} />
          </button>
          
          <div className="text-center">
            <div className="flex items-center justify-center mb-3">
              <Crown className="w-8 h-8 text-yellow-300 mr-2" />
              <h2 className="text-2xl font-bold">Unlock Full Access</h2>
            </div>
            <p className="text-blue-100">
              Join to get unlimited transformations!
            </p>
          </div>
        </div>

        {/* Content */}
        <div className="p-6">
          {/* Usage Status */}
          {usage && (
            <div className="bg-gray-50 rounded-lg p-4 mb-6">
              <h3 className="font-semibold text-gray-900 mb-3 flex items-center gap-2">
                {getFeatureIcon(lastFeatureAttempted)}
                Your Usage Summary
              </h3>
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span className="text-gray-600">Face Matches:</span>
                  <span className={`font-medium ${usage.can_match ? 'text-green-600' : 'text-red-600'}`}>
                    {usage.matches_used}/{usage.matches_limit}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Randomizes:</span>
                  <span className={`font-medium ${usage.can_randomize ? 'text-green-600' : 'text-red-600'}`}>
                    {usage.randomizes_used}/{usage.randomizes_limit}
                  </span>
                </div>
              </div>
            </div>
          )}

          {/* Benefits */}
          <div className="mb-6">
            <h3 className="font-semibold text-gray-900 mb-4 text-center">
              ‚ú® What you'll get with an account:
            </h3>
            <div className="space-y-3">
              <div className="flex items-center gap-3 text-gray-700">
                <div className="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
                  <Infinity className="w-4 h-4 text-green-600" />
                </div>
                <span>Unlimited face matching</span>
              </div>
              <div className="flex items-center gap-3 text-gray-700">
                <div className="w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center">
                  <Sparkles className="w-4 h-4 text-purple-600" />
                </div>
                <span>Unlimited randomize feature</span>
              </div>
              <div className="flex items-center gap-3 text-gray-700">
                <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                  <Users className="w-4 h-4 text-blue-600" />
                </div>
                <span>Access to all historical figures</span>
              </div>
            </div>
          </div>

          {/* Social Auth Buttons */}
          <div className="space-y-4">
            <SocialAuth 
              onGoogleSuccess={handleGoogleSuccess}
              onFacebookSuccess={handleFacebookSuccess}
              onError={handleSocialAuthError}
            />
            
            <div className="text-center">
              <div className="text-sm text-gray-500 mb-2">or</div>
              <button
                onClick={handleEmailSignup}
                className="text-blue-600 hover:text-blue-800 text-sm font-medium"
              >
                Create account with email
              </button>
            </div>
          </div>

          {/* Footer */}
          <div className="text-center mt-6 pt-4 border-t border-gray-200">
            <p className="text-xs text-gray-500">
              Free to join ‚Ä¢ No credit card required ‚Ä¢ Start creating immediately
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default RegistrationGate;



# ==== src/components/ErrorBoundary.tsx ====

import { Component, type ErrorInfo, type ReactNode } from 'react';
import { AlertTriangle, RefreshCw } from 'lucide-react';

interface Props {
  children: ReactNode;
}

interface State {
  hasError: boolean;
  error?: Error;
}

class ErrorBoundary extends Component<Props, State> {
  public state: State = {
    hasError: false
  };

  public static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error };
  }

  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('ErrorBoundary caught an error:', error, errorInfo);
  }

  private handleReset = () => {
    this.setState({ hasError: false, error: undefined });
  };

  public render() {
    if (this.state.hasError) {
      return (
        <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
          <div className="max-w-md w-full bg-white rounded-xl shadow-lg p-8 text-center">
            <div className="flex items-center justify-center mb-6">
              <AlertTriangle className="w-16 h-16 text-red-500" />
            </div>
            
            <h2 className="text-2xl font-bold text-gray-900 mb-4">
              Something went wrong
            </h2>
            
            <p className="text-gray-600 mb-6">
              We encountered an unexpected error. Don't worry, your data is safe.
            </p>
            
            <div className="space-y-4">
              <button
                onClick={this.handleReset}
                className="w-full bg-blue-500 hover:bg-blue-600 text-white font-semibold py-3 px-6 rounded-lg transition-colors flex items-center justify-center gap-2"
              >
                <RefreshCw size={20} />
                Try Again
              </button>
              
              <button
                onClick={() => window.location.reload()}
                className="w-full bg-white hover:bg-gray-50 text-gray-700 font-semibold py-3 px-6 rounded-lg border border-gray-300 hover:border-gray-400 transition-colors"
              >
                Reload Page
              </button>
            </div>
            
            {import.meta.env.DEV && this.state.error && (
              <details className="mt-6 text-left">
                <summary className="text-sm text-gray-500 cursor-pointer hover:text-gray-700">
                  Technical Details
                </summary>
                <pre className="mt-2 text-xs text-red-600 bg-red-50 p-3 rounded overflow-auto">
                  {this.state.error.toString()}
                </pre>
              </details>
            )}
          </div>
        </div>
      );
    }

    return this.props.children;
  }
}

export default ErrorBoundary;



# ==================== Assets & Styles ====================



# ==== src/App.css ====

#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}




# ==== src/index.css ====

@tailwind base;
@tailwind components;
@tailwind utilities;

/* Reset and base styles */
* {
  box-sizing: border-box;
}

html, body, #root {
  height: 100%;
  margin: 0;
  padding: 0;
}

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

/* Custom component classes */
@layer components {
  .btn-primary {
    @apply bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 text-white font-semibold py-3 px-6 rounded-lg transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100;
  }
  
  .btn-secondary {
    @apply bg-white hover:bg-gray-50 text-gray-700 font-semibold py-3 px-6 rounded-lg border border-gray-300 hover:border-gray-400 transition-all duration-200 shadow-sm hover:shadow-md;
  }
  
  .btn-danger {
    @apply bg-red-500 hover:bg-red-600 text-white font-semibold py-3 px-6 rounded-lg transition-all duration-200 shadow-lg hover:shadow-xl;
  }
}

/* Custom animations */
@keyframes pulse-slow {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0.5;
  }
}

.animate-pulse-slow {
  animation: pulse-slow 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
}



# ==== src/assets/react.svg ====

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>



# ==== public/vite.svg ====

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>



# ==== ./index.html ====

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>HistoryFace - AI Historical Transformation</title>
    
    <!-- üî• UPDATED: Latest Open Graph Meta Tags -->
    <meta property="og:title" content="HistoryFace - AI Historical Transformation" />
    <meta property="og:description" content="Transform into historical figures with AI! See which historical personality you resemble most." />
    <meta property="og:image" content="https://ai-convert.netlify.app/og-preview.jpg" />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:url" content="https://ai-convert.netlify.app" />
    <meta property="og:type" content="website" />
    <meta property="og:site_name" content="HistoryFace" />
    <meta property="fb:app_id" content="1430950704695809" />
    
    <!-- Twitter Cards -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="HistoryFace - AI Historical Transformation" />
    <meta name="twitter:description" content="Transform into historical figures with AI!" />
    <meta name="twitter:image" content="https://ai-convert.netlify.app/og-preview.jpg" />
    
    <!-- Google Identity Services -->
    <script src="https://accounts.google.com/gsi/client" async defer></script>
    
    <!-- üî• UPDATED: Facebook SDK v20.0 (Latest) -->
    <script>
      window.fbAsyncInit = function() {
        try {
          FB.init({
            appId: '1430950704695809',
            cookie: true,
            xfbml: true,
            version: 'v20.0'
          });
          window.fbReady = true;
          console.log('‚úÖ Facebook SDK v20.0 initialized');
        } catch (error) {
          console.error('‚ùå Facebook SDK error:', error);
          window.fbSkipped = true;
        }
      };

      (function(d, s, id) {
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) return;
        js = d.createElement(s); 
        js.id = id;
        
        const isSecure = location.protocol === 'https:' || location.hostname === 'localhost';
        if (isSecure) {
          js.src = "https://connect.facebook.net/en_US/sdk.js";
          js.onerror = () => { window.fbSkipped = true; };
          fjs.parentNode.insertBefore(js, fjs);
        } else {
          window.fbSkipped = true;
        }
      }(document, 'script', 'facebook-jssdk'));
    </script>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>



# ==================== Other Files ====================



# ==== ./Dockerfile ====

# backend/Dockerfile

FROM python:3.10.3-slim-bullseye

# Avoid prompts during install
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies only once
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    cmake \
    gfortran \
    git \
    libatlas-base-dev \
    libjpeg-dev \
    liblapack-dev \
    libswscale-dev \
    libavcodec-dev \
    libavformat-dev \
    libgtk2.0-dev \
    libpq-dev \
    curl \
    wget \
    && rm -rf /var/lib/apt/lists/*

# Pre-create working dir
WORKDIR /app

# üëá Copy and install only requirements first (layer cache win)
COPY requirements.txt /app/
RUN pip install --no-cache-dir --upgrade pip wheel && \
    pip install --no-cache-dir numpy && \
    pip install --no-cache-dir dlib && \
    pip install --no-cache-dir face-recognition && \
    pip install --no-cache-dir -r requirements.txt

# Copy entire project
COPY . /app/

# Create necessary dirs for media/static
RUN mkdir -p /app/media/uploads/selfies /app/staticfiles

# Optional: run collectstatic here if needed
# RUN python manage.py collectstatic --noinput || echo "Skipping collectstatic"

# Non-root user
RUN adduser --disabled-password --gecos '' appuser && \
    chown -R appuser:appuser /app
USER appuser

EXPOSE 8000

# Health check (optional)
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
  CMD python3 -c "import requests; requests.get('http://localhost:8000/health/', timeout=10)" || exit 1

CMD ["gunicorn", "--bind", "0.0.0.0:8000", "--workers", "3", "--timeout", "300", "django_project.wsgi:application"]




# ==== ./README.md ====

# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config({
  extends: [
    // Remove ...tseslint.configs.recommended and replace with this
    ...tseslint.configs.recommendedTypeChecked,
    // Alternatively, use this for stricter rules
    ...tseslint.configs.strictTypeChecked,
    // Optionally, add this for stylistic rules
    ...tseslint.configs.stylisticTypeChecked,
  ],
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config({
  plugins: {
    // Add the react-x and react-dom plugins
    'react-x': reactX,
    'react-dom': reactDom,
  },
  rules: {
    // other rules...
    // Enable its recommended typescript rules
    ...reactX.configs['recommended-typescript'].rules,
    ...reactDom.configs.recommended.rules,
  },
})
```




# ==== ./Dockerfile.dev ====

# Development Dockerfile for React frontend
FROM node:18-alpine

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy source code
COPY . .

# Expose port
EXPOSE 5173

# Start development server
CMD ["npm", "run", "dev", "--", "--host", "0.0.0.0"]

