# MATT FREEDOM FUNDRAISER V2 - CODE SNAPSHOT
# Generated for donation platform development and debugging
# Created: 2025-07-14 16:02:58
# Total files: 27
# Focus: Donation platform, emails, profiles, authentication


# ==================== CONFIGURATION FILES ====================


# ==== requirements.txt ====

```
# Core Django
Django==5.1.6
djangorestframework==3.15.2
django-environ==0.11.2
django-cors-headers==4.6.0
django-extensions==3.2.3

# Database & Server
psycopg2-binary==2.9.10
dj-database-url==2.3.0
gunicorn==23.0.0
whitenoise==6.8.2

# Celery & Redis
celery==5.4.0
redis==5.2.1
django-celery-beat==2.7.0
django-celery-results==2.5.1

# Authentication
django-allauth==65.6.0
PyJWT==2.10.1

# Payments
stripe==11.4.0

# Email
sendgrid==6.11.0
# OR if using AWS SES:
# boto3==1.35.78

# Storage & Media
cloudinary==1.42.0
django-cloudinary-storage==0.3.0
Pillow==11.1.0

# HTTP & API
httpx==0.28.1
requests==2.32.3
certifi==2025.4.26

# Forms & UI (if needed)
django-crispy-forms==2.3
crispy-bootstrap5==2024.10

# Utilities
python-dateutil==2.9.0.post0
pytz==2025.2

# PDF Generation for receipts
reportlab==4.2.5
WeasyPrint==64.1
```

# ==== requirements-dev.txt ====

```
-r requirements.txt

# Development & Testing
flake8==7.2.0
black==24.12.1
mypy==1.15.0
pytest==8.3.5
pytest-django==4.11.0
pytest-cov==6.0.0
factory-boy==3.3.1

# Debugging
django-debug-toolbar==5.0.0
ipython==8.31.0

# Security scanning
safety==3.2.14
bandit==1.8.0
```

# ==== docker-compose.yml ====

```yaml
services:
  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: donations_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_password
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Celery
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django Backend - BOUND TO 8003
  backend:
    build: 
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "8003:8000"  # üî• CHANGED: External port 8003, internal port 8000
    environment:
      - DEBUG=True
      - DJANGO_SETTINGS_MODULE=django_project.settings.dev
      - DATABASE_URL=postgresql://postgres:postgres_password@db:5432/donations_db
      - DJANGO_SECRET_KEY=dev-secret-key-change-in-production
      - DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1,backend,0.0.0.0
      
      # Storage
      - CLOUDINARY_URL=${CLOUDINARY_URL}
      
      # Stripe
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      
      # Email (SendGrid or AWS SES)
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL:-donations@mattfreedomfundraiser.com}
      
      # Google OAuth (optional for admin)
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      
      # Celery
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      
      # Frontend URL for CORS - UPDATED FOR PORT 8003
      - FRONTEND_URL=http://localhost:8004
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["python", "manage.py", "runserver", "0.0.0.0:8000"]

  # React Frontend - BOUND TO 8004 for development
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "8004:5173"  # üî• NEW: Frontend on 8004 to work with backend on 8003
    environment:
      - VITE_API_BASE_URL=http://localhost:8003
      - VITE_GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - VITE_FACEBOOK_APP_ID=${FACEBOOK_APP_ID}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    command: ["npm", "run", "dev", "--", "--host", "0.0.0.0"]

  # Celery Worker
  celery_worker:
    build: 
      context: .
      dockerfile: Dockerfile.dev
    environment:
      - DEBUG=True
      - DJANGO_SETTINGS_MODULE=django_project.settings.dev
      - DATABASE_URL=postgresql://postgres:postgres_password@db:5432/donations_db
      - DJANGO_SECRET_KEY=dev-secret-key-change-in-production
      - CLOUDINARY_URL=${CLOUDINARY_URL}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL:-donations@mattfreedomfundraiser.com}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - IS_CELERY_WORKER=true
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["celery", "-A", "django_project", "worker", "--loglevel=info"]

  # Celery Beat
  celery_beat:
    build: 
      context: .
      dockerfile: Dockerfile.dev
    environment:
      - DEBUG=True
      - DJANGO_SETTINGS_MODULE=django_project.settings.dev
      - DATABASE_URL=postgresql://postgres:postgres_password@db:5432/donations_db
      - DJANGO_SECRET_KEY=dev-secret-key-change-in-production
      - CLOUDINARY_URL=${CLOUDINARY_URL}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL:-donations@mattfreedomfundraiser.com}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - IS_CELERY_WORKER=true
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["celery", "-A", "django_project", "beat", "--loglevel=info", "--scheduler", "django_celery_beat.schedulers:DatabaseScheduler"]

volumes:
  postgres_data:
  static_volume:
  media_volume:
  redis_data:
```

# ==== fly.toml ====

```
app = "ai-face-swap-app"
primary_region = "ewr"
console_command = "/code/manage.py shell"

[build]

[env]
  PORT = "8000"

[http_service]
  internal_port = 8000
  force_https = true
  auto_start_machines = true
  auto_stop_machines = false        # ‚Üê CHANGED: Disable auto-stopping
  min_machines_running = 2          # ‚Üê CHANGED: Keep 2 machines running
  processes = ["app"]

  [http_service.concurrency]
    type = "connections"
    soft_limit = 20
    hard_limit = 25

[[vm]]
  memory = "4gb"
  cpu_kind = "shared"
  cpus = 2          # ‚Üê Change this from 1 to 2

[[statics]]
  guest_path = "/code/static"
  url_prefix = "/static/"

# Postgres internal service (Flycast resolution) - LEAVE THIS AS-IS
[[services]]
  internal_port = 5432
  protocol = "tcp"
  auto_start_machines = true
  auto_stop_machines = true
  processes = ["app"]

  [services.concurrency]
    type = "connections"
    soft_limit = 20
    hard_limit = 25

  [[services.ports]]
    port = 5432
    handlers = ["pg_tls"]
```

# ==== manage.py ====

```python
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "django_project.settings.dev")
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

```

# ==== .env.example ====

```
# Donation Platform Environment Variables
# Copy this to .env and fill with your values

# Django
DJANGO_SECRET_KEY=your-secret-key-here
DEBUG=True

# Database (for production)
DATABASE_URL=postgresql://user:password@host:5432/donations_db

# Cloudinary
CLOUDINARY_URL=cloudinary://api_key:api_secret@cloud_name

# Stripe
STRIPE_SECRET_KEY=sk_test_your_key_here
STRIPE_PUBLISHABLE_KEY=pk_test_your_key_here
STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret

# Email (SendGrid)
SENDGRID_API_KEY=your_sendgrid_api_key
DEFAULT_FROM_EMAIL=donations@mattfreedomfundraiser.com
CONTACT_EMAIL=matt@mattfreedomfundraiser.com

# Optional: Google OAuth (for admin)
GOOGLE_CLIENT_ID=your-google-client-id
GOOGLE_CLIENT_SECRET=your-google-client-secret

# Frontend URL (for CORS)
FRONTEND_URL=http://localhost:5173

# Celery
CELERY_BROKER_URL=redis://localhost:6379/0
CELERY_RESULT_BACKEND=redis://localhost:6379/0
```

# ==================== PYTHON CODE ====================


# ==== accounts/models.py ====

```python
from django.contrib.auth.models import AbstractBaseUser, PermissionsMixin
from django.db import models
from django.utils import timezone
from django.contrib.auth.base_user import BaseUserManager


class CustomUserManager(BaseUserManager):
    def create_user(self, email, password=None, **extra_fields):
        if not email:
            raise ValueError("The Email field must be set")
        email = self.normalize_email(email)
        user = self.model(email=email, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, password, **extra_fields):
        extra_fields.setdefault("is_staff", True)
        extra_fields.setdefault("is_superuser", True)
        if not extra_fields.get("is_staff") or not extra_fields.get("is_superuser"):
            raise ValueError("Superuser must have is_staff=True and is_superuser=True.")
        return self.create_user(email, password, **extra_fields)


class CustomUser(AbstractBaseUser, PermissionsMixin):
    email = models.EmailField(unique=True)
    first_name = models.CharField(max_length=30, blank=True)
    last_name = models.CharField(max_length=30, blank=True)
    is_staff = models.BooleanField(default=False)
    is_active = models.BooleanField(default=True)
    date_joined = models.DateTimeField(default=timezone.now)

    USERNAME_FIELD = "email"
    REQUIRED_FIELDS = []

    objects = CustomUserManager()

    def __str__(self):
        return self.email

```

# ==== accounts/social_auth.py ====

```python
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from rest_framework.authtoken.models import Token
from django.contrib.auth import get_user_model
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
import os
import logging

logger = logging.getLogger(__name__)
User = get_user_model()

@method_decorator(csrf_exempt, name='dispatch')
class GoogleAuthView(APIView):
    def post(self, request):
        """Simplified Google OAuth - no JWT verification needed"""
        try:
            print("üîë Google auth request received")
            print(f"Request data keys: {list(request.data.keys())}")
            
            credential = request.data.get('credential')
            user_info = request.data.get('user_info', {})
            
            if not credential:
                print("‚ùå No credential provided")
                return Response({'error': 'Google credential required'}, 
                              status=status.HTTP_400_BAD_REQUEST)
            
            # Extract email from user_info (already parsed by frontend)
            email = user_info.get('email')
            if not email:
                print("‚ùå No email in user_info")
                print(f"Available user_info: {user_info}")
                return Response({'error': 'Email not provided'}, 
                              status=status.HTTP_400_BAD_REQUEST)
            
            print(f"‚úÖ Processing auth for email: {email}")
            
            # Get or create user (simplified approach)
            try:
                user = User.objects.get(email=email)
                print(f"üë§ Found existing user: {email}")
                
                # Update names if they're empty
                if not user.first_name and user_info.get('given_name'):
                    user.first_name = user_info.get('given_name', '')
                if not user.last_name and user_info.get('family_name'):
                    user.last_name = user_info.get('family_name', '')
                user.save()
                
            except User.DoesNotExist:
                print(f"üìù Creating new user: {email}")
                user = User.objects.create_user(
                    email=email,
                    first_name=user_info.get('given_name', ''),
                    last_name=user_info.get('family_name', ''),
                )
            
            # Create or get token
            token, created = Token.objects.get_or_create(user=user)
            print(f"üîë Token {'created' if created else 'retrieved'} for user")
            
            response_data = {
                'token': token.key,
                'user': {
                    'id': user.id,
                    'email': user.email,
                    'first_name': user.first_name,
                    'last_name': user.last_name,
                }
            }
            
            print(f"‚úÖ Sending success response for user {email}")
            return Response(response_data)
            
        except Exception as e:
            print(f"‚ùå Unexpected error in Google auth: {e}")
            import traceback
            traceback.print_exc()
            return Response({'error': 'Google authentication failed'}, 
                          status=status.HTTP_500_INTERNAL_SERVER_ERROR)

@method_decorator(csrf_exempt, name='dispatch')
class FacebookAuthView(APIView):
    def post(self, request):
        """Facebook auth placeholder"""
        return Response({'error': 'Facebook auth not available on HTTP'}, 
                      status=status.HTTP_400_BAD_REQUEST)
```

# ==== accounts/serializers.py ====

```python
from rest_framework import serializers
from django.contrib.auth import get_user_model

User = get_user_model()


class CustomUserSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True, required=True, min_length=8)

    class Meta:
        model = User
        fields = ["id", "email", "first_name", "last_name", "password"]
        read_only_fields = ["id"]

    def create(self, validated_data):
        user = User.objects.create_user(
            email=validated_data["email"],
            password=validated_data["password"],
            first_name=validated_data.get("first_name", ""),
            last_name=validated_data.get("last_name", "")
        )
        return user

    def update(self, instance, validated_data):
        for attr, value in validated_data.items():
            if attr == "password":
                instance.set_password(value)
            else:
                setattr(instance, attr, value)
        instance.save()
        return instance

```

# ==== accounts/apps.py ====

```python
from django.apps import AppConfig


class AccountsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'accounts'

```

# ==== accounts/forms.py ====

```python
from django.contrib.auth import get_user_model
from django.contrib.auth.forms import UserCreationForm, UserChangeForm

class CustomUserCreationForm(UserCreationForm):
    class Meta:
        model = get_user_model()
        fields = ("email",)  # Remove 'username'

class CustomUserChangeForm(UserChangeForm):
    class Meta:
        model = get_user_model()
        fields = ("email",)  # Remove 'username'

```

# ==== accounts/admin.py ====

```python
from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from .models import CustomUser
from .forms import CustomUserCreationForm, CustomUserChangeForm

@admin.register(CustomUser)
class CustomUserAdmin(UserAdmin):
    add_form = CustomUserCreationForm
    form = CustomUserChangeForm
    model = CustomUser

    list_display = ("email", "first_name", "last_name", "is_staff", "is_active")
    list_filter = ("is_staff", "is_active")
    ordering = ("email",)

    fieldsets = (
        (None, {"fields": ("email", "password")}),
        ("Personal Info", {"fields": ("first_name", "last_name")}),
        ("Permissions", {"fields": ("is_staff", "is_active", "groups", "user_permissions")}),
        ("Important dates", {"fields": ("last_login", "date_joined")}),
    )

    add_fieldsets = (
        (None, {
            "classes": ("wide",),
            "fields": ("email", "password1", "password2", "is_staff", "is_active"),
        }),
    )

```

# ==== accounts/api_auth.py ====

```python
from rest_framework.authtoken.views import ObtainAuthToken
from rest_framework.authtoken.models import Token
from rest_framework.response import Response
from rest_framework import status
from django.contrib.auth import authenticate
from rest_framework.views import APIView
from rest_framework.permissions import AllowAny


class CustomAuthToken(APIView):
    permission_classes = [AllowAny]

    def post(self, request, *args, **kwargs):
        email = request.data.get("email")
        password = request.data.get("password")

        if not email or not password:
            return Response({"error": "Email and password are required."}, status=status.HTTP_400_BAD_REQUEST)

        user = authenticate(request, username=email, password=password)

        if not user:
            return Response({"error": "Invalid credentials."}, status=status.HTTP_400_BAD_REQUEST)

        token, _ = Token.objects.get_or_create(user=user)
        return Response({
            "token": token.key,
            "user_id": user.id,
            "email": user.email,
        })

```

# ==== accounts/urls.py ====

```python
from django.urls import path
from .views import SignupAPIView, UserProfileAPIView, CustomAuthToken
from .social_auth import GoogleAuthView, FacebookAuthView


app_name = "accounts"

urlpatterns = [
    path("signup/", SignupAPIView.as_view(), name="signup"),
    path("me/", UserProfileAPIView.as_view(), name="user-profile"),
    path("login/", CustomAuthToken.as_view(), name="token-login"),
    path("auth/google/", GoogleAuthView.as_view(), name="google-auth"),
    path("auth/facebook/", FacebookAuthView.as_view(), name="facebook-auth"),


]

```

# ==== accounts/views.py ====

```python
from rest_framework import generics, permissions, status
from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework.authtoken.views import ObtainAuthToken
from rest_framework.authtoken.models import Token
from django.contrib.auth import authenticate, get_user_model

from .serializers import CustomUserSerializer

User = get_user_model()


class SignupAPIView(generics.CreateAPIView):
    """
    POST /api/accounts/signup/
    """
    queryset = User.objects.all()
    serializer_class = CustomUserSerializer
    permission_classes = [permissions.AllowAny]


class UserProfileAPIView(APIView):
    """
    GET, PUT /api/accounts/me/
    """
    permission_classes = [permissions.IsAuthenticated]

    def get(self, request):
        serializer = CustomUserSerializer(request.user)
        return Response(serializer.data)

    def put(self, request):
        serializer = CustomUserSerializer(request.user, data=request.data, partial=True)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class CustomAuthToken(ObtainAuthToken):
    """
    POST /api/accounts/login/
    Authenticates using email and password.
    """
    def post(self, request, *args, **kwargs):
        email = request.data.get("email")
        password = request.data.get("password")

        if not email or not password:
            return Response({"error": "Email and password are required."}, status=status.HTTP_400_BAD_REQUEST)

        user = authenticate(request, email=email, password=password)
        if not user:
            return Response({"error": "Invalid credentials."}, status=status.HTTP_401_UNAUTHORIZED)

        token, created = Token.objects.get_or_create(user=user)
        return Response({"token": token.key})

```

# ==== django_project/celery_urls.py ====

```python
# django_project/celery_urls.py
# Minimal URL configuration for Celery workers (bypasses admin)

from django.urls import path
from django.http import JsonResponse

def celery_health_check(request):
    """Simple health check for Celery workers"""
    return JsonResponse({
        "status": "celery_worker_healthy",
        "service": "celery",
        "message": "Celery worker URLs loaded successfully"
    })

# Minimal URL patterns that don't require admin or complex routing
urlpatterns = [
    path("health/", celery_health_check, name="celery-health"),
]
```

# ==== django_project/asgi.py ====

```python
"""
ASGI config for django_project project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project.settings.prod')

application = get_asgi_application()

```

# ==== django_project/__init__.py ====

```python
# django_project/__init__.py
from __future__ import absolute_import, unicode_literals

# This will make sure the app is always imported when
# Django starts so that shared_task will use this app.
from .celery import app as celery_app

__all__ = ('celery_app',)
```

# ==== django_project/celery.py ====

```python
from __future__ import absolute_import, unicode_literals
import os
from celery import Celery

# Set default Django settings module for the 'celery' program
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project.settings.dev')

app = Celery('django_project')

# Using a string here means the worker doesn't have to serialize
# the configuration object to child processes
app.config_from_object('django.conf:settings', namespace='CELERY')

# Load task modules from all registered Django apps
app.autodiscover_tasks()

@app.task(bind=True)
def debug_task(self):
    print(f'Request: {self.request!r}')

print("‚úÖ Celery app configured successfully")
```

# ==== django_project/urls.py ====

```python
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static
from django.http import JsonResponse

def api_root(request):
    return JsonResponse({
        "message": "MattFreedomFundraiser API",
        "version": "1.0",
        "endpoints": {
            "campaigns": "/api/campaigns/",
            "donations": "/api/donations/",
            "profile": "/api/profile/",
        }
    })

def health_check(request):
    return JsonResponse({"status": "healthy", "service": "donations-api"})

urlpatterns = [
    path("", api_root),
    path("health/", health_check, name="health-check"),
    path("admin/", admin.site.urls),
    
    # API endpoints
    path("api/accounts/", include("accounts.urls")),
    path("api/campaigns/", include("donations.urls_campaigns")),
    path("api/donations/", include("donations.urls_donations")),
    path("api/profile/", include("profiles.urls")),
    
    # Stripe webhook
    path("api/stripe/webhook/", include("donations.urls_stripe")),
]

if settings.DEBUG:
    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
```

# ==== django_project/wsgi.py ====

```python
"""
WSGI config for django_project project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project.settings.prod')

application = get_wsgi_application()

```

# ==== django_project/settings/test.py ====

```python
from .base import *

DEBUG = False
SECRET_KEY = "test-secret-key"

STRIPE_PUBLISHABLE_KEY = "pk_test_dummy"
STRIPE_SECRET_KEY = "sk_test_dummy"
STRIPE_WEBHOOK_SECRET = "whsec_dummy"
stripe.api_key = STRIPE_SECRET_KEY



EMAIL_BACKEND = "django.core.mail.backends.locmem.EmailBackend"
EMAIL_HOST = "localhost"
EMAIL_PORT = 1025
EMAIL_USE_TLS = False
EMAIL_HOST_USER = ""
EMAIL_HOST_PASSWORD = ""
DEFAULT_FROM_EMAIL = "test@example.com"


# In-memory test DB
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "test.sqlite3",
    }
}

RECAPTCHA_PUBLIC_KEY = "test"
RECAPTCHA_PRIVATE_KEY = "test"

# üëá Google SSO override here only for tests
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': ['profile', 'email'],
        'AUTH_PARAMS': {'access_type': 'online'},
        'OAUTH_PKCE_ENABLED': True,
        'APP': {
            'client_id': 'test-client-id',
            'secret': 'test-secret',
            'key': ''
        }
    }
}

SECURE_SSL_REDIRECT = False
SECURE_HSTS_SECONDS = 0
SECURE_HSTS_INCLUDE_SUBDOMAINS = False
SECURE_HSTS_PRELOAD = False
SESSION_COOKIE_SECURE = False
CSRF_COOKIE_SECURE = False

```

# ==== django_project/settings/dev.py ====

```python
# backend/django_project/settings/dev.py
from .base import *

DEBUG = True

# Database for local development
DATABASES = {
    "default": env.db_url("DATABASE_URL", default="postgresql://postgres:postgres_password@db:5432/faceswap_db")
}

# Add localhost to allowed hosts
ALLOWED_HOSTS = env.list("DJANGO_ALLOWED_HOSTS", default=[
    "localhost", "127.0.0.1", "0.0.0.0", "backend"
])

# CORS settings for local development
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",  # Vite dev server
    "http://127.0.0.1:5173",
]
```

# ==== django_project/settings/prod.py ====

```python
# django_project/settings/prod.py - IMPROVED WITH DATABASE ERROR HANDLING
from .base import *
import os
import sys
import dj_database_url
from django.core.exceptions import ImproperlyConfigured

DEBUG = False

# ---------------- SECURITY ----------------
SECURE_SSL_REDIRECT = True
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = "DENY"
SECURE_HSTS_SECONDS = 31536000
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True

# ---------------- STATIC FILES ----------------
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
STATIC_ROOT = BASE_DIR / "staticfiles"

# ---------------- DATABASE (IMPROVED ERROR HANDLING) ----------------
DATABASE_URL = os.environ.get("DATABASE_URL")

if DATABASE_URL:
    try:
        print(f"üîç Raw DATABASE_URL: {DATABASE_URL[:50]}...", file=sys.stderr)
        
        parsed = dj_database_url.parse(
            DATABASE_URL,
            conn_max_age=600,
            conn_health_checks=True,
        )
        
        # Add engine if missing
        if "ENGINE" not in parsed:
            parsed["ENGINE"] = "django.db.backends.postgresql"
        
        print(f"‚úÖ DEBUG: Parsed DATABASE_URL ‚Üí {parsed}", file=sys.stderr)
        
        # üî• FIX: Handle empty database name (common Fly.io issue)
        if not parsed.get("NAME") or parsed.get("NAME") == "":
            # Try to extract database name from the app name
            app_name = os.environ.get("FLY_APP_NAME", "ai-face-swap-app")
            # Remove the "-app" suffix if present for database name
            db_name = app_name.replace("-app", "")
            parsed["NAME"] = db_name
            print(f"üîß Fixed empty database name: using '{db_name}'", file=sys.stderr)
        
        # Validate all required database fields
        required_fields = ["ENGINE", "NAME", "USER", "HOST", "PORT"]
        missing_fields = [field for field in required_fields if not parsed.get(field)]
        
        if missing_fields:
            print(f"‚ùå Missing database fields: {missing_fields}", file=sys.stderr)
            raise ImproperlyConfigured(f"Missing database configuration fields: {missing_fields}")
        
        DATABASES = {"default": parsed}
        print(f"‚úÖ Database configured successfully: {parsed['NAME']}@{parsed['HOST']}", file=sys.stderr)
        
    except Exception as e:
        print(f"‚ùå Database configuration error: {e}", file=sys.stderr)
        print(f"Raw DATABASE_URL was: {DATABASE_URL}", file=sys.stderr)
        
        # üî• FALLBACK: Try manual parsing if dj_database_url fails
        if "postgres://" in DATABASE_URL or "postgresql://" in DATABASE_URL:
            print("üîß Attempting manual DATABASE_URL parsing...", file=sys.stderr)
            try:
                import re
                # Parse postgres://user:password@host:port/database
                match = re.match(r'postgres(?:ql)?://([^:]+):([^@]+)@([^:]+):(\d+)/(.+)', DATABASE_URL)
                if match:
                    user, password, host, port, database = match.groups()
                    # Remove query parameters if present
                    database = database.split('?')[0]
                    
                    DATABASES = {
                        "default": {
                            "ENGINE": "django.db.backends.postgresql",
                            "NAME": database,
                            "USER": user,
                            "PASSWORD": password,
                            "HOST": host,
                            "PORT": int(port),
                            "CONN_MAX_AGE": 600,
                            "CONN_HEALTH_CHECKS": True,
                        }
                    }
                    print(f"‚úÖ Manual parsing successful: {database}@{host}", file=sys.stderr)
                else:
                    raise Exception("Could not parse DATABASE_URL format")
            except Exception as manual_error:
                print(f"‚ùå Manual parsing also failed: {manual_error}", file=sys.stderr)
                raise ImproperlyConfigured(f"Could not configure database: {e}")
        else:
            raise ImproperlyConfigured(f"Invalid DATABASE_URL format: {e}")
else:
    print("‚ùå No DATABASE_URL environment variable found", file=sys.stderr)
    raise ImproperlyConfigured("DATABASE_URL environment variable is required in production")

# ---------------- HOSTS ----------------
# Get app name from Fly.io environment
FLY_APP_NAME = os.environ.get("FLY_APP_NAME", "ai-face-swap-app")

ALLOWED_HOSTS = [
    f"{FLY_APP_NAME}.fly.dev",
    "ai-face-swap-app.fly.dev",
    "localhost",
    "127.0.0.1",
]

# Add custom allowed hosts from environment
custom_hosts = os.environ.get("DJANGO_ALLOWED_HOSTS", "")
if custom_hosts:
    ALLOWED_HOSTS.extend([host.strip() for host in custom_hosts.split(",") if host.strip()])

CSRF_TRUSTED_ORIGINS = [
    f"https://{FLY_APP_NAME}.fly.dev",
    "https://ai-face-swap-app.fly.dev",
]

# CORS for frontend
CORS_ALLOWED_ORIGINS = [
    f"https://{FLY_APP_NAME}.fly.dev",
    "https://ai-face-swap-app.fly.dev",
]

# ---------------- LOGGING (IMPROVED) ----------------
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        "django.db.backends": {
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
}

print(f"‚úÖ Production settings loaded for {FLY_APP_NAME}", file=sys.stderr)
```

# ==== django_project/settings/base.py ====

```python
from environ import Env
from pathlib import Path
import stripe
import os
from django.core.management.utils import get_random_secret_key

print("üí• settings.py loaded from latest build")

# Cloudinary Configuration
import cloudinary
import cloudinary.uploader
import cloudinary.api

# Initialize environment variables
env = Env()

# For build time, provide defaults for all required env vars
cloudinary_url = env('CLOUDINARY_URL', default='')
if cloudinary_url:
    # Parse the cloudinary://api_key:api_secret@cloud_name format
    import re
    match = re.match(r'cloudinary://(\d+):([^@]+)@(.+)', cloudinary_url)
    if match:
        api_key, api_secret, cloud_name = match.groups()
        CLOUDINARY_STORAGE = {
            'CLOUD_NAME': cloud_name,
            'API_KEY': api_key,
            'API_SECRET': api_secret,
        }
        print(f"‚úÖ Cloudinary configured from CLOUDINARY_URL for cloud: {cloud_name}")
    else:
        print("‚ö†Ô∏è  Invalid CLOUDINARY_URL format, using fallback")
        CLOUDINARY_STORAGE = {
            'CLOUD_NAME': env('CLOUDINARY_CLOUD_NAME', default='dddye9wli'),
            'API_KEY': env('CLOUDINARY_API_KEY', default='dummy'),
            'API_SECRET': env('CLOUDINARY_API_SECRET', default='dummy'),
        }
else:
    # Fallback to individual environment variables
    CLOUDINARY_STORAGE = {
        'CLOUD_NAME': env('CLOUDINARY_CLOUD_NAME', default='dddye9wli'),
        'API_KEY': env('CLOUDINARY_API_KEY', default='dummy'),
        'API_SECRET': env('CLOUDINARY_API_SECRET', default='dummy'),
    }
    print("‚ö†Ô∏è  Using individual Cloudinary env vars")

cloudinary.config(
    cloud_name=CLOUDINARY_STORAGE['CLOUD_NAME'],
    api_key=CLOUDINARY_STORAGE['API_KEY'],
    api_secret=CLOUDINARY_STORAGE['API_SECRET'],
    secure=True
)

# Stripe
STRIPE_PUBLISHABLE_KEY = env('STRIPE_PUBLISHABLE_KEY', default='pk_test_dummy')
STRIPE_SECRET_KEY = env('STRIPE_SECRET_KEY', default='sk_test_dummy')
STRIPE_WEBHOOK_SECRET = env('STRIPE_WEBHOOK_SECRET', default='whsec_dummy')
stripe.api_key = STRIPE_SECRET_KEY

OPENAI_API_KEY = env("OPENAI_API_KEY", default="dummy")

# Base directory
BASE_DIR = Path(__file__).resolve().parent.parent

# Security - use Django's built-in secret key generator for build time
SECRET_KEY = env("DJANGO_SECRET_KEY", default=get_random_secret_key())
DEBUG = env.bool("DJANGO_DEBUG", default=False)
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# Hosts
ALLOWED_HOSTS = env.list("DJANGO_ALLOWED_HOSTS", default=[
    "localhost", "127.0.0.1", "0.0.0.0", "web", "*.fly.dev"
])

# üî• SIMPLE CELERY FIX - detect if this is a Celery worker
import sys

# Check if this is a Celery worker process
IS_CELERY = (
    os.environ.get('IS_CELERY_WORKER') == 'true' or
    'celery' in sys.argv[0] or 
    'worker' in sys.argv or
    'beat' in sys.argv
)

# Disable CSRF for specific API endpoints
CSRF_EXEMPT_URLS = [
    r'^/api/imagegen/generate/$',
    r'^/api/imagegen/randomize/$',
    r'^/api/accounts/auth/google/$',      # üî• ADD THIS
    r'^/api/accounts/auth/facebook/$',   
]

class DisableCSRFMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        import re
        # Check if this URL should be exempt from CSRF
        for pattern in CSRF_EXEMPT_URLS:
            if re.match(pattern, request.path_info):
                setattr(request, '_dont_enforce_csrf_checks', True)
                print(f"üîì CSRF exempted for: {request.path_info}")  # Debug log
        
        return self.get_response(request)

if IS_CELERY:
    print("üîß Celery worker detected - applying minimal configuration...")
    
    # Minimal apps for Celery workers
    INSTALLED_APPS = [
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'cloudinary_storage',
        'cloudinary',
        
        # Custom apps (needed for tasks)
        'accounts.apps.AccountsConfig',
        'faceswap.apps.FaceswapConfig',
        'imagegen',
        
        # Celery apps
        'django_celery_beat',
        'django_celery_results',
        
        'rest_framework',
        'rest_framework.authtoken',
    ]
    
    # Minimal middleware for Celery workers
    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
    ]
    
    # Use minimal URLs for Celery
    ROOT_URLCONF = 'django_project.celery_urls'
    
else:
    print("üåê Standard Django configuration loaded")
    
    # Full apps for Django web server
    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'cloudinary_storage',
        'cloudinary',

        # Custom apps
        'accounts.apps.AccountsConfig',
        'chat.apps.ChatConfig',
        'faceswap.apps.FaceswapConfig',

        # Third-party
        'django.contrib.sites',
        'allauth',
        'allauth.account',
        'allauth.socialaccount',
        'allauth.socialaccount.providers.google',
        'allauth.socialaccount.providers.facebook',  # üî• ADD THIS


        'imagegen',
        'corsheaders',

        'rest_framework',
        'rest_framework.authtoken',

        'django_celery_beat',
        'django_celery_results', 
    ]

    # Full middleware for Django web server
    MIDDLEWARE = [
        'corsheaders.middleware.CorsMiddleware',
        'django_project.settings.base.DisableCSRFMiddleware',  # üî• Add this BEFORE CsrfViewMiddleware
        'django.middleware.security.SecurityMiddleware',
        'whitenoise.middleware.WhiteNoiseMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'allauth.account.middleware.AccountMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
        'imagegen.middleware.UsageLimitMiddleware',
    ]
    ROOT_URLCONF = 'django_project.urls'

# Templates
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR.parent / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_project.wsgi.application'

# Database - provide default for build time
DATABASES = {
    "default": env.db_url("DATABASE_URL", default="sqlite:///tmp/build.db")
}

# Auth
AUTH_USER_MODEL = 'accounts.CustomUser'
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Allauth - FIXED: Updated to new settings format
SITE_ID = env.int("DJANGO_SITE_ID", default=1)

# ‚úÖ NEW: Updated allauth settings (no more deprecation warnings)
ACCOUNT_LOGIN_METHODS = {'email'}  # Replaces ACCOUNT_AUTHENTICATION_METHOD
ACCOUNT_SIGNUP_FIELDS = ['email', 'password1', 'password2']  # Replaces EMAIL_REQUIRED and USERNAME_REQUIRED
ACCOUNT_EMAIL_VERIFICATION = 'optional'
ACCOUNT_SIGNUP_REDIRECT_URL = '/dashboard/'
LOGIN_REDIRECT_URL = '/accounts/dashboard/'
LOGOUT_REDIRECT_URL = '/'

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': ['profile', 'email'],
        'AUTH_PARAMS': {'access_type': 'online'},
        'OAUTH_PKCE_ENABLED': True,
        'APP': {
            'client_id': env('GOOGLE_CLIENT_ID', default='test-client-id'),
            'secret': env('GOOGLE_CLIENT_SECRET', default='test-secret'),
            'key': ''
        }
    },
    # üî• ADD FACEBOOK
    'facebook': {
        'METHOD': 'oauth2',
        'SCOPE': ['email', 'public_profile'],
        'AUTH_PARAMS': {'auth_type': 'reauthenticate'},
        'INIT_PARAMS': {'cookie': True},
        'FIELDS': [
            'id',
            'email',
            'name',
            'first_name',
            'last_name',
            'verified',
            'locale',
            'timezone',
            'link',
            'gender',
            'updated_time',
        ],
        'EXCHANGE_TOKEN': True,
        'LOCALE_FUNC': 'path.to.callable',
        'VERIFIED_EMAIL': False,
        'VERSION': 'v13.0',
        'APP': {
            'client_id': env('FACEBOOK_CLIENT_ID', default='test-client-id'),
            'secret': env('FACEBOOK_CLIENT_SECRET', default='test-secret'),
        }
    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Localization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files - properly configured for collectstatic
STATIC_URL = "/static/"
STATICFILES_DIRS = [BASE_DIR.parent / "static"] if (BASE_DIR.parent / "static").exists() else []
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Media
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

# Staticfiles finders
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

# Email
EMAIL_BACKEND = env("EMAIL_BACKEND", default="django.core.mail.backends.locmem.EmailBackend")
EMAIL_HOST = env("EMAIL_HOST", default="smtp.test.com")
EMAIL_PORT = env.int("EMAIL_PORT", default=587)
EMAIL_USE_TLS = env.bool("EMAIL_USE_TLS", default=True)
EMAIL_HOST_USER = env("EMAIL_HOST_USER", default="test@test.com")
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD", default="testpassword")
DEFAULT_FROM_EMAIL = env("DEFAULT_FROM_EMAIL", default="noreply@test.com")

# Security
if not DEBUG:
    SECURE_SSL_REDIRECT = env.bool("DJANGO_SECURE_SSL_REDIRECT", default=True)
    SECURE_HSTS_SECONDS = env.int("DJANGO_SECURE_HSTS_SECONDS", default=2592000)
    SECURE_HSTS_INCLUDE_SUBDOMAINS = env.bool("DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS", default=True)
    SECURE_HSTS_PRELOAD = env.bool("DJANGO_SECURE_HSTS_PRELOAD", default=True)
    SESSION_COOKIE_SECURE = env.bool("DJANGO_SESSION_COOKIE_SECURE", default=True)
    CSRF_COOKIE_SECURE = env.bool("DJANGO_CSRF_COOKIE_SECURE", default=True)
else:
    SECURE_SSL_REDIRECT = False
    SECURE_HSTS_SECONDS = 0
    SECURE_HSTS_INCLUDE_SUBDOMAINS = False
    SECURE_HSTS_PRELOAD = False
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False

# Other
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ]
}

# HuggingFace Configuration - FIXED
HUGGINGFACE_SPACE_NAME = env('HUGGINGFACE_SPACE_NAME', default='mnraynor90/facefusionfastapi-private')
HUGGINGFACE_API_TOKEN = env("HUGGINGFACE_API_TOKEN", default="dummy")

print(f"üîß HuggingFace Space: {HUGGINGFACE_SPACE_NAME}")
print(f"üîë HuggingFace Token: {'***configured***' if HUGGINGFACE_API_TOKEN != 'dummy' else 'NOT SET'}")

# CORS Configuration (only for non-Celery)
if not IS_CELERY:
    CORS_ALLOW_ALL_ORIGINS = True
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:5173",
        "http://127.0.0.1:5173",
        "http://localhost:3000",
        "https://ai-convert.netlify.app",
    ]
    CORS_ALLOW_CREDENTIALS = True
    CORS_PREFLIGHT_MAX_AGE = 86400

    CORS_ALLOW_HEADERS = [
        'accept', 'accept-encoding', 'authorization', 'content-type', 'dnt', 'origin',
        'user-agent', 'x-csrftoken', 'x-requested-with', 'cache-control', 'pragma',
        'expires', 'content-length', 'host', 'referer', 'sec-ch-ua', 'sec-ch-ua-mobile',
        'sec-ch-ua-platform', 'sec-fetch-dest', 'sec-fetch-mode', 'sec-fetch-site',
    ]

    CORS_ALLOW_METHODS = ['DELETE', 'GET', 'OPTIONS', 'PATCH', 'POST', 'PUT', 'HEAD']

# Conditional Logging
if IS_CELERY:
    # Simplified logging for Celery workers
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
            },
        },
        'root': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'loggers': {
            'celery': {
                'handlers': ['console'],
                'level': 'INFO',
                'propagate': False,
            },
        },
    }
    
    # Disable problematic system checks for Celery
    SILENCED_SYSTEM_CHECKS = [
        'admin.E404',
        'urls.E007',
        'urls.W005',
        'security.W004',
        'security.W008',
    ]
    
    print("‚úÖ Celery worker configuration applied")
else:
    # Full logging for Django
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
            },
        },
        'loggers': {
            'corsheaders': {
                'handlers': ['console'],
                'level': 'DEBUG',
                'propagate': True,
            },
            'django.request': {
                'handlers': ['console'],
                'level': 'DEBUG',
                'propagate': True,
            },
        },
    }

# Celery Configuration
CELERY_BROKER_URL = env('CELERY_BROKER_URL', default='redis://localhost:6379/0')
CELERY_RESULT_BACKEND = 'django-db'
CELERY_CACHE_BACKEND = 'django-cache'
CELERY_RESULT_EXPIRES = 7 * 24 * 60 * 60  # 7 days
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TIMEZONE = TIME_ZONE
CELERY_ENABLE_UTC = True
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes
CELERY_TASK_SOFT_TIME_LIMIT = 25 * 60  # 25 minutes
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# Periodic Tasks Configuration
from celery.schedules import crontab
CELERY_BEAT_SCHEDULE = {
    'cleanup-expired-images': {
        'task': 'imagegen.tasks.cleanup_expired_images_task',
        'schedule': crontab(minute=0, hour='*/6'),  # Every 6 hours
        'options': {'expires': 60 * 60}  # Task expires in 1 hour if not picked up
    },
}

# Fix session cookies for frontend - IMPROVED
SESSION_COOKIE_SAMESITE = 'Lax'  # Try Lax instead of None
SESSION_COOKIE_SECURE = False    # For development (HTTP)
SESSION_COOKIE_HTTPONLY = True   # Security
SESSION_COOKIE_AGE = 1209600     # 2 weeks
CSRF_COOKIE_SAMESITE = 'Lax'     # Also fix CSRF cookies
CSRF_COOKIE_SECURE = False       # For development

CSRF_TRUSTED_ORIGINS = [
    "http://localhost:5173",
    "http://127.0.0.1:5173",
]

print(f"‚úÖ Settings loaded - IS_CELERY: {IS_CELERY}")
```

# ==== Dockerfile ====

```
# Production Dockerfile for Donation Platform
FROM python:3.12-slim

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    libpq-dev \
    curl \
    # For WeasyPrint (PDF generation)
    libpango-1.0-0 \
    libpangocairo-1.0-0 \
    libgdk-pixbuf2.0-0 \
    libffi-dev \
    shared-mime-info \
    # Cleanup
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Set work directory
WORKDIR /app

# Copy requirements and install Python packages
COPY requirements.txt /app/
RUN pip install --no-cache-dir --upgrade pip wheel
RUN pip install --no-cache-dir -r requirements.txt

# Set build-time environment variables
ENV DJANGO_SETTINGS_MODULE=django_project.settings.base
ENV DJANGO_SECRET_KEY=build-time-secret-key
ENV DATABASE_URL=sqlite:///tmp/build.db
ENV CLOUDINARY_URL=cloudinary://dummy:dummy@dummy
ENV STRIPE_SECRET_KEY=sk_test_dummy
ENV STRIPE_PUBLISHABLE_KEY=pk_test_dummy

# Copy project
COPY . /app/

# Create directories
RUN mkdir -p /app/staticfiles /app/media

# Collect static files
RUN python manage.py collectstatic --noinput || echo "Collectstatic failed, continuing..."

# Create non-root user for security
RUN adduser --disabled-password --gecos '' appuser
RUN chown -R appuser:appuser /app
USER appuser

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
  CMD python -c "import requests; requests.get('http://localhost:8000/health/', timeout=10)" || exit 1

# Default command
CMD ["gunicorn", "--bind", "0.0.0.0:8000", "--workers", "3", "--timeout", "120", "django_project.wsgi:application"]
```

# ==== Dockerfile.dev ====

```
# Development Dockerfile for Donation Platform
FROM python:3.12-slim

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    libpq-dev \
    git \
    curl \
    # For WeasyPrint (PDF generation)
    libpango-1.0-0 \
    libpangocairo-1.0-0 \
    libgdk-pixbuf2.0-0 \
    libffi-dev \
    shared-mime-info \
    # Cleanup
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Set work directory
WORKDIR /app

# Copy requirements first for better caching
COPY requirements.txt requirements-dev.txt /app/

# Upgrade pip and install dependencies
RUN pip install --no-cache-dir --upgrade pip wheel
RUN pip install --no-cache-dir -r requirements-dev.txt

# Copy project
COPY . /app/

# Create directories
RUN mkdir -p /app/staticfiles /app/media

# Expose port
EXPOSE 8000

# Default command for development
CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]
```
