# MATT FREEDOM FUNDRAISER V2 - CODE SNAPSHOT
# Generated for donation platform development and debugging
# Created: 2025-07-18 11:27:02
# Total files: 43
# Focus: Donation platform, emails, profiles, authentication


# ==================== CONFIGURATION FILES ====================


# ==== requirements.txt ====

```
# Core Django
Django==5.1.6
djangorestframework==3.15.2
django-environ==0.11.2
django-cors-headers==4.6.0
django-extensions==3.2.3

# Database & Server
psycopg2-binary==2.9.10
dj-database-url==2.3.0
gunicorn==23.0.0
whitenoise==6.8.2

# Celery & Redis
celery==5.4.0
redis==5.2.1
django-celery-beat==2.7.0
django-celery-results==2.5.1

# Authentication
django-allauth==65.6.0
PyJWT==2.10.1

# Payments
stripe==11.4.0

# Email
sendgrid==6.11.0
# OR if using AWS SES:
# boto3==1.35.78

# Storage & Media
cloudinary==1.42.0
django-cloudinary-storage==0.3.0
Pillow==11.1.0

# HTTP & API
httpx==0.28.1
requests==2.32.3
certifi==2025.4.26

# Forms & UI (if needed)
django-crispy-forms==2.3
crispy-bootstrap5==2024.10

# Utilities
python-dateutil==2.9.0.post0
pytz==2025.2

# PDF Generation for receipts
reportlab==4.2.5
WeasyPrint==64.1

cryptography==42.0.8  # 🔥 ADD THIS LINE

```

# ==== requirements-dev.txt ====

```
-r requirements.txt

# Development & Testing  
flake8==7.2.0
black==25.1.0
mypy==1.15.0
pytest==8.3.5
pytest-django==4.11.0

# Debugging
django-debug-toolbar==5.0.0
ipython==8.31.0

```

# ==== docker-compose.yml ====

```yaml
services:
  # PostgreSQL Database - DIFFERENT PORT
  db:
    image: postgres:16-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: donations_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_password
    ports:
      - "5433:5432"  # 🔥 CHANGED: Use 5433 externally
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Celery - DIFFERENT PORT
  redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"  # 🔥 CHANGED: Use 6380 externally
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django Backend - PORT 8003
  backend:
    build: 
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "8003:8000"
    environment:
      - DEBUG=True
      - DJANGO_SETTINGS_MODULE=django_project.settings.dev
      - DATABASE_URL=postgresql://postgres:postgres_password@db:5432/donations_db
      - DJANGO_SECRET_KEY=dev-secret-key-change-in-production
      - DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1,backend,0.0.0.0
      - CLOUDINARY_URL=${CLOUDINARY_URL}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL:-mnraynor90@gmail.com}
      - GMAIL_USER=${GMAIL_USER}
      - GMAIL_APP_PASSWORD=${GMAIL_APP_PASSWORD}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - FRONTEND_URL=http://localhost:5173

    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["python", "manage.py", "runserver", "0.0.0.0:8000"]

  # Celery Worker
  celery_worker:
    build: 
      context: .
      dockerfile: Dockerfile.dev
    environment:
      - DEBUG=True
      - DJANGO_SETTINGS_MODULE=django_project.settings.dev
      - DATABASE_URL=postgresql://postgres:postgres_password@db:5432/donations_db
      - DJANGO_SECRET_KEY=dev-secret-key-change-in-production
      - CLOUDINARY_URL=${CLOUDINARY_URL}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL:-mnraynor90@gmail.com}
      - GMAIL_USER=${GMAIL_USER}
      - GMAIL_APP_PASSWORD=${GMAIL_APP_PASSWORD}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - IS_CELERY_WORKER=true
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["celery", "-A", "django_project", "worker", "--loglevel=info"]

volumes:
  postgres_data:
  static_volume:
  media_volume:
  redis_data:
```

# ==== fly.toml ====

```
app = "ai-face-swap-app"
primary_region = "ewr"
console_command = "/code/manage.py shell"

[build]

[env]
  PORT = "8000"

[http_service]
  internal_port = 8000
  force_https = true
  auto_start_machines = true
  auto_stop_machines = false        # ← CHANGED: Disable auto-stopping
  min_machines_running = 2          # ← CHANGED: Keep 2 machines running
  processes = ["app"]

  [http_service.concurrency]
    type = "connections"
    soft_limit = 20
    hard_limit = 25

[[vm]]
  memory = "4gb"
  cpu_kind = "shared"
  cpus = 2          # ← Change this from 1 to 2

[[statics]]
  guest_path = "/code/static"
  url_prefix = "/static/"

# Postgres internal service (Flycast resolution) - LEAVE THIS AS-IS
[[services]]
  internal_port = 5432
  protocol = "tcp"
  auto_start_machines = true
  auto_stop_machines = true
  processes = ["app"]

  [services.concurrency]
    type = "connections"
    soft_limit = 20
    hard_limit = 25

  [[services.ports]]
    port = 5432
    handlers = ["pg_tls"]
```

# ==== manage.py ====

```python
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "django_project.settings.dev")
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

```

# ==== .env.example ====

```
# Matt Freedom Fundraiser v2
DJANGO_SECRET_KEY=your-secret-key-here
DEBUG=True
DATABASE_URL=postgresql://postgres:postgres_password@db:5432/donations_db

# Cloudinary
CLOUDINARY_URL=cloudinary://api_key:api_secret@cloud_name

# Stripe (Test Mode Keys)
STRIPE_SECRET_KEY=sk_test_your_secret_key_here
STRIPE_PUBLISHABLE_KEY=pk_test_your_publishable_key_here
STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret_here

# Email
SENDGRID_API_KEY=your_sendgrid_api_key_here
DEFAULT_FROM_EMAIL=donations@mattfreedomfundraiser.com

# Optional Google OAuth
GOOGLE_CLIENT_ID=your_google_client_id_here
GOOGLE_CLIENT_SECRET=your_google_client_secret_here

# Frontend URL (UPDATE: Fixed port)
FRONTEND_URL=http://localhost:5173
```

# ==================== PYTHON CODE ====================


# ==== donations/models.py ====

```python
from django.db import models
from django.contrib.auth import get_user_model
from django.utils import timezone
from decimal import Decimal

User = get_user_model()

class Campaign(models.Model):
    """
    Matt's fundraising campaigns - usually one active at a time
    Examples: "Help Matt Find Accessible Housing", "Equipment Fund"
    """
    title = models.CharField(max_length=200)
    description = models.TextField()
    goal_amount = models.DecimalField(max_digits=10, decimal_places=2)
    current_amount = models.DecimalField(max_digits=10, decimal_places=2, default=Decimal('0.00'))
    is_active = models.BooleanField(default=True)
    start_date = models.DateTimeField(default=timezone.now)
    end_date = models.DateTimeField(null=True, blank=True)
    featured_image = models.URLField(blank=True)
    featured_video_url = models.URLField(blank=True)  # Add this
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        ordering = ['-created_at']
    
    def __str__(self):
        return self.title
        
    @property
    def progress_percentage(self):
        """Calculate percentage toward goal"""
        if self.goal_amount and self.goal_amount > 0:
            return min(100, (self.current_amount / self.goal_amount) * 100)
        return 0
class Donation(models.Model):
    """
    Individual donations - people can donate any amount they want
    """
    PAYMENT_STATUS_CHOICES = [
        ('pending', 'Pending'),
        ('completed', 'Completed'),
        ('failed', 'Failed'),
        ('refunded', 'Refunded'),
    ]
    
    # Campaign relationship
    campaign = models.ForeignKey(Campaign, on_delete=models.CASCADE, related_name='donations')
    
    # Donation details
    amount = models.DecimalField(max_digits=8, decimal_places=2)
    
    # Donor information (all optional)
    donor_name = models.CharField(max_length=100, blank=True)
    donor_email = models.EmailField(blank=True)
    user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)
    is_anonymous = models.BooleanField(default=False)
    message = models.TextField(blank=True)
    
    # Payment processing
    stripe_session_id = models.CharField(max_length=200, unique=True)
    stripe_payment_intent_id = models.CharField(max_length=200, blank=True)
    payment_status = models.CharField(max_length=20, choices=PAYMENT_STATUS_CHOICES, default='pending')
    
    # Communication tracking
    receipt_sent = models.BooleanField(default=False)
    receipt_sent_at = models.DateTimeField(null=True, blank=True)
    
    # Future: Recurring donations
    is_recurring = models.BooleanField(default=False)
    stripe_subscription_id = models.CharField(max_length=200, blank=True)
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        ordering = ['-created_at']
    
    def __str__(self):
        donor = self.donor_name or "Anonymous"
        return f"${self.amount} from {donor}"
    
    def save(self, *args, **kwargs):
        """Update campaign total when donation is completed"""
        is_new = self.pk is None
        old_status = None
        
        if not is_new:
            old_donation = Donation.objects.get(pk=self.pk)
            old_status = old_donation.payment_status
        
        super().save(*args, **kwargs)
        
        # Update campaign total if payment status changed to completed
        if (is_new and self.payment_status == 'completed') or \
           (old_status != 'completed' and self.payment_status == 'completed'):
            self.campaign.current_amount += Decimal(str(self.amount))
            self.campaign.save()
        
        # Subtract if refunded
        elif old_status == 'completed' and self.payment_status == 'refunded':
            self.campaign.current_amount -= self.amount
            self.campaign.save()

class CampaignUpdate(models.Model):
    """
    Updates Matt can post - text, photos, or video blogs
    """
    campaign = models.ForeignKey(Campaign, on_delete=models.CASCADE, related_name='updates')
    
    title = models.CharField(max_length=200)
    # "Video Update: Housing Search Progress!" 
    
    content = models.TextField()
    # Text description/summary of the video
    
    # Media - flexible for images or videos
    image_url = models.URLField(blank=True)
    # Thumbnail or photo
    
    video_url = models.URLField(blank=True) 
    # YouTube embed, Vimeo, or direct video file
    
    video_embed_code = models.TextField(blank=True)
    # Full YouTube/Vimeo embed code if needed
    
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        ordering = ['-created_at']
    
    def __str__(self):
        return f"{self.title} - {self.created_at.strftime('%b %d, %Y')}"
    
    @property
    def has_video(self):
        return bool(self.video_url or self.video_embed_code)
```

# ==== donations/serializers.py ====

```python
from rest_framework import serializers
from .models import Campaign, Donation, CampaignUpdate

class CampaignSerializer(serializers.ModelSerializer):
    progress_percentage = serializers.ReadOnlyField()
    
    class Meta:
        model = Campaign
        fields = [
            'id', 'title', 'description', 'goal_amount', 
            'current_amount', 'progress_percentage', 'is_active',
            'start_date', 'end_date', 'featured_image', 'featured_video_url',
            'created_at', 'updated_at'
        ]

class DonationSerializer(serializers.ModelSerializer):
    class Meta:
        model = Donation
        fields = [
            'id', 'amount', 'donor_name', 'donor_email', 
            'is_anonymous', 'message', 'created_at'
        ]

class CampaignUpdateSerializer(serializers.ModelSerializer):
    has_video = serializers.ReadOnlyField()
    
    class Meta:
        model = CampaignUpdate
        fields = [
            'id', 'title', 'content', 'video_url', 
            'video_embed_code', 'image_url', 'has_video', 'created_at'
        ]

class CreateDonationSerializer(serializers.Serializer):
    amount = serializers.DecimalField(max_digits=8, decimal_places=2, min_value=1)
    donor_name = serializers.CharField(max_length=100, required=False, allow_blank=True)
    donor_email = serializers.EmailField(required=False, allow_blank=True)
    message = serializers.CharField(required=False, allow_blank=True)
    is_anonymous = serializers.BooleanField(default=False)
```

# ==== donations/apps.py ====

```python
from django.apps import AppConfig


class DonationsConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "donations"

```

# ==== donations/admin.py ====

```python
from django.contrib import admin
from .models import Campaign, Donation, CampaignUpdate

@admin.register(Campaign)
class CampaignAdmin(admin.ModelAdmin):
    list_display = ['title', 'current_amount', 'goal_amount', 'is_active']
    readonly_fields = ['current_amount', 'progress_percentage']
    list_filter = ['is_active']

@admin.register(Donation)
class DonationAdmin(admin.ModelAdmin):
    list_display = ['amount', 'donor_name', 'donor_email', 'payment_status', 'created_at']
    readonly_fields = ['stripe_session_id', 'stripe_payment_intent_id']
    list_filter = ['payment_status', 'campaign']

@admin.register(CampaignUpdate)
class CampaignUpdateAdmin(admin.ModelAdmin):
    list_display = ['title', 'campaign', 'created_at']
    readonly_fields = ['created_at']
```

# ==== donations/urls.py ====

```python
from django.urls import path
from . import views

app_name = 'donations'

urlpatterns = [
    path('campaign/', views.CurrentCampaignView.as_view(), name='current-campaign'),
    path('recent/', views.RecentDonationsView.as_view(), name='recent-donations'),
    path('updates/', views.CampaignUpdatesView.as_view(), name='campaign-updates'),
    path('create/', views.create_donation, name='create-donation'),
    path('stripe/webhook/', views.stripe_webhook, name='stripe-webhook'),
    path('success/', views.payment_success, name='payment-success'),
    path('cancel/', views.payment_cancel, name='payment-cancel'),
]
```

# ==== donations/views.py ====

```python
from rest_framework import generics, status
from rest_framework.decorators import api_view, permission_classes
from rest_framework.response import Response
from rest_framework.permissions import AllowAny
from django.conf import settings
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
import stripe
import json
import logging

from .models import Campaign, Donation, CampaignUpdate
from .serializers import CampaignSerializer, DonationSerializer, CampaignUpdateSerializer, CreateDonationSerializer

logger = logging.getLogger(__name__)
stripe.api_key = settings.STRIPE_SECRET_KEY

class CurrentCampaignView(generics.RetrieveAPIView):
    serializer_class = CampaignSerializer
    permission_classes = [AllowAny]
    
    def get_object(self):
        return Campaign.objects.filter(is_active=True).first()

class RecentDonationsView(generics.ListAPIView):
    serializer_class = DonationSerializer
    permission_classes = [AllowAny]
    
    def get_queryset(self):
        return Donation.objects.filter(
            payment_status='completed',
            is_anonymous=False
        ).order_by('-created_at')[:10]

class CampaignUpdatesView(generics.ListAPIView):
    serializer_class = CampaignUpdateSerializer
    permission_classes = [AllowAny]
    
    def get_queryset(self):
        campaign = Campaign.objects.filter(is_active=True).first()
        return campaign.updates.all() if campaign else CampaignUpdate.objects.none()


@api_view(['POST'])
@permission_classes([AllowAny])
def create_donation(request):
    try:
        # Validate input
        serializer = CreateDonationSerializer(data=request.data)
        if not serializer.is_valid():
            return Response({'error': 'Invalid data', 'details': serializer.errors}, status=400)
        
        data = serializer.validated_data
        campaign = Campaign.objects.filter(is_active=True).first()
        if not campaign:
            return Response({'error': 'No active campaign'}, status=404)
        
        # Create donation record FIRST
        donation = Donation.objects.create(
            campaign=campaign,
            amount=data['amount'],
            donor_name=data.get('donor_name', ''),
            donor_email=data.get('donor_email', ''),
            message=data.get('message', ''),
            is_anonymous=data.get('is_anonymous', False),
            stripe_session_id='',  # Will be updated after session creation
            payment_status='pending'
        )
        
        logger.info(f"Created donation record {donation.id} for ${donation.amount}")
        
        # Create Stripe session with COMPLETE metadata including donation_id
        session = stripe.checkout.Session.create(
            payment_method_types=['card'],
            line_items=[{
                'price_data': {
                    'currency': 'usd',
                    'product_data': {'name': f'Donation to {campaign.title}'},
                    'unit_amount': int(float(data['amount']) * 100),
                },
                'quantity': 1,
            }],
            mode='payment',
            success_url=f"{settings.FRONTEND_URL}/success?session_id={{CHECKOUT_SESSION_ID}}",
            cancel_url=f"{settings.FRONTEND_URL}/cancel",
            metadata={
                'donation_id': str(donation.id),  # 🔥 THE CRITICAL FIX!
                'campaign_id': str(campaign.id),
                'amount': str(data['amount']),
                'donor_name': data.get('donor_name', ''),
                'donor_email': data.get('donor_email', ''),
            }
        )
        
        # Update donation with session ID
        donation.stripe_session_id = session.id
        donation.save()
        
        logger.info(f"Stripe session created: {session.id} for donation {donation.id}")
        
        return Response({'checkout_url': session.url})
        
    except Exception as e:
        logger.error(f"Donation creation failed: {e}")
        return Response({'error': 'Payment setup failed'}, status=500)
    
@csrf_exempt
@api_view(['POST'])
@permission_classes([AllowAny])
def stripe_webhook(request):
    payload = request.body
    sig_header = request.META.get('HTTP_STRIPE_SIGNATURE')
    
    try:
        event = stripe.Webhook.construct_event(
            payload, sig_header, settings.STRIPE_WEBHOOK_SECRET
        )
        print(f"✅ Webhook verified: {event['type']}")
        
        if event['type'] == 'checkout.session.completed':
            session = event['data']['object']
            donation_id = session['metadata'].get('donation_id')
            
            if donation_id:
                try:
                    donation = Donation.objects.get(id=int(donation_id))
                    print(f"✅ Found donation: ${donation.amount} - current status: {donation.payment_status}")
                    
                    old_status = donation.payment_status
                    donation.payment_status = 'completed'
                    donation.stripe_payment_intent_id = session.get('payment_intent', '')
                    donation.save()
                    
                    print(f"✅ Donation {donation_id} updated: {old_status} → completed")
                    
                    # 🔥 NEW: Trigger thank you email
                    if old_status != 'completed' and donation.payment_status == 'completed':
                        # Import the email task
                        from emails.tasks import send_thank_you_email
                        
                        # Queue the email task
                        result = send_thank_you_email.delay(donation.id)
                        print(f"📧 Queued thank you email for donation {donation.id} - Task ID: {result.id}")
                    
                    # Check campaign total
                    campaign = donation.campaign
                    print(f"💰 Campaign total now: ${campaign.current_amount}")
                    
                except Donation.DoesNotExist:
                    print(f"❌ Donation {donation_id} not found in database")
                except Exception as e:
                    print(f"❌ Error processing donation {donation_id}: {e}")
            else:
                print(f"❌ No donation_id in session metadata")
        
    except Exception as e:
        print(f"❌ Webhook error: {e}")
        return Response({'error': 'Invalid signature'}, status=400)
    
    return Response({'status': 'success'})
@api_view(['GET'])
@permission_classes([AllowAny])
def payment_success(request):
    session_id = request.GET.get('session_id')
    if session_id:
        try:
            session = stripe.checkout.Session.retrieve(session_id)
            donation_id = session['metadata'].get('donation_id')
            return Response({
                'status': 'success',
                'donation_id': donation_id,
                'amount': session['amount_total'] / 100
            })
        except:
            pass
    return Response({'status': 'success'})

@api_view(['GET'])
@permission_classes([AllowAny])
def payment_cancel(request):
    return Response({'status': 'cancelled', 'message': 'Payment was cancelled'})
```

# ==== profiles/models.py ====

```python
from django.db import models

# Create your models here.

```

# ==== profiles/apps.py ====

```python
from django.apps import AppConfig


class ProfilesConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "profiles"

```

# ==== profiles/admin.py ====

```python
from django.contrib import admin

# Register your models here.

```

# ==== profiles/views.py ====

```python
from django.shortcuts import render

# Create your views here.

```

# ==== emails/tasks.py ====

```python
# backend/emails/tasks.py
from celery import shared_task
from django.conf import settings
from django.utils import timezone
from django.core.mail import send_mail
from django.template.loader import render_to_string
import logging
from decimal import Decimal

from .models import EmailTemplate, EmailLog
from donations.models import Donation

logger = logging.getLogger(__name__)

@shared_task
def send_thank_you_email(donation_id):
    """
    Send thank you email after successful donation
    Works with console backend, SMTP, and SendGrid
    """
    try:
        print(f"📧 Processing thank you email for donation {donation_id}")
        
        # Get the donation
        donation = Donation.objects.get(id=donation_id)
        
        # Skip if anonymous or no email
        if donation.is_anonymous or not donation.donor_email:
            print(f"⏭️  Skipping email - anonymous: {donation.is_anonymous}, no email: {not donation.donor_email}")
            return f"Skipped email for donation {donation_id} (anonymous or no email)"
        
        # Check if email already sent
        existing_log = EmailLog.objects.filter(
            donation=donation,
            was_sent=True
        ).first()
        
        if existing_log:
            print(f"⏭️  Email already sent for donation {donation_id}")
            return f"Email already sent for donation {donation_id}"
        
        # Get email template
        template = EmailTemplate.objects.filter(
            name='thank_you_email', 
            is_active=True
        ).first()
        
        if not template:
            print(f"❌ No active thank you email template found")
            
            # Create a basic fallback email
            subject = f"Thank you for your donation, {donation.donor_name or 'Friend'}!"
            html_content = f"""
            <h2>Thank you for your support!</h2>
            <p>Dear {donation.donor_name or 'Friend'},</p>
            <p>Thank you for your generous donation of ${donation.amount} to {donation.campaign.title}.</p>
            <p>Your support means everything to me.</p>
            <p>With gratitude,<br>Matt Raynor</p>
            """
        else:
            # Use template
            try:
                # Prepare context variables
                context = {
                    'donor_name': donation.donor_name or 'Friend',
                    'amount': float(donation.amount),
                    'campaign_title': donation.campaign.title,
                    'campaign_description': donation.campaign.description,
                    'current_total': float(donation.campaign.current_amount),
                    'goal_amount': float(donation.campaign.goal_amount),
                    'progress_percentage': donation.campaign.progress_percentage,
                    'donation_date': donation.created_at.strftime('%B %d, %Y'),
                    'message': donation.message or ''
                }
                
                # Format subject and content
                subject = template.subject.format(**context)
                html_content = template.html_content.format(**context)
                
            except Exception as template_error:
                print(f"⚠️  Template formatting error: {template_error}")
                # Fall back to basic email
                subject = f"Thank you for your donation, {donation.donor_name or 'Friend'}!"
                html_content = f"""
                <h2>Thank you for your support!</h2>
                <p>Dear {donation.donor_name or 'Friend'},</p>
                <p>Thank you for your generous donation of ${donation.amount} to {donation.campaign.title}.</p>
                <p>Your support means everything to me.</p>
                <p>With gratitude,<br>Matt Raynor</p>
                """
        
        # Create plain text version
        plain_text_content = f"""
        Thank you for your donation!
        
        Dear {donation.donor_name or 'Friend'},
        
        Thank you for your generous donation of ${donation.amount} to {donation.campaign.title}.
        
        Your support means everything to me.
        
        With gratitude,
        Matt Raynor
        """
        
        # Send email using Django's built-in email system
        # This works with console backend, SMTP, and SendGrid
        try:
            print(f"📤 Sending email to {donation.donor_email}")
            print(f"📧 Subject: {subject}")
            print(f"📧 Backend: {settings.EMAIL_BACKEND}")
            
            send_mail(
                subject=subject,
                message=plain_text_content,
                from_email=settings.DEFAULT_FROM_EMAIL,
                recipient_list=[donation.donor_email],
                html_message=html_content,
                fail_silently=False,
            )
            
            # Log successful email
            EmailLog.objects.create(
                recipient_email=donation.donor_email,
                subject=subject,
                donation=donation,
                was_sent=True,
                sent_at=timezone.now()
            )
            
            print(f"✅ Thank you email sent to {donation.donor_email}")
            return f"Email sent to {donation.donor_email}"
            
        except Exception as email_error:
            print(f"❌ Email sending failed: {email_error}")
            
            # Log failed email
            EmailLog.objects.create(
                recipient_email=donation.donor_email,
                subject=subject,
                donation=donation,
                was_sent=False
            )
            
            return f"Email failed: {str(email_error)}"
        
    except Donation.DoesNotExist:
        error_msg = f"Donation {donation_id} not found"
        print(f"❌ {error_msg}")
        return error_msg
        
    except Exception as e:
        error_msg = f"Email task failed for donation {donation_id}: {str(e)}"
        print(f"❌ {error_msg}")
        
        # Try to log failed email attempt
        try:
            if 'donation' in locals():
                EmailLog.objects.create(
                    recipient_email=donation.donor_email,
                    subject=f"Failed: Thank you email",
                    donation=donation,
                    was_sent=False
                )
        except:
            pass  # Don't fail if logging fails
            
        return error_msg

@shared_task
def send_campaign_update_notification(campaign_update_id):
    """
    Send notification to all donors when a campaign update is posted
    Future feature - not implemented yet
    """
    print(f"📧 Campaign update notification task for update {campaign_update_id} - not implemented yet")
    return "Campaign update notifications not implemented"

@shared_task
def send_donation_receipt(donation_id):
    """
    Send formal receipt for tax purposes
    Future feature - could generate PDF receipt
    """
    print(f"📧 Donation receipt task for donation {donation_id} - not implemented yet")
    return "Donation receipts not implemented"

@shared_task
def test_email_task():
    """
    Test task to verify Celery is working
    """
    print("📧 Test email task executed successfully")
    return "Test email task completed"
```

# ==== emails/models.py ====

```python
from django.db import models
from donations.models import Donation, CampaignUpdate

class EmailTemplate(models.Model):
    """
    Email templates Matt can customize
    """
    name = models.CharField(max_length=100)
    # "Thank You Email" or "Update Notification"
    
    subject = models.CharField(max_length=200)
    # "Thank you for supporting my journey!"
    
    html_content = models.TextField()
    # Email HTML with variables like {{donor_name}}, {{amount}}
    
    is_active = models.BooleanField(default=True)
    
    def __str__(self):
        return self.name


class EmailLog(models.Model):
    """
    Track emails sent - prevent duplicates and debug issues
    """
    recipient_email = models.EmailField()
    subject = models.CharField(max_length=200)
    
    # What triggered this email
    donation = models.ForeignKey(Donation, on_delete=models.SET_NULL, null=True, blank=True)
    campaign_update = models.ForeignKey(CampaignUpdate, on_delete=models.SET_NULL, null=True, blank=True)
    
    # Status
    was_sent = models.BooleanField(default=False)
    sent_at = models.DateTimeField(null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    
    def __str__(self):
        return f"{self.subject} → {self.recipient_email}"
```

# ==== emails/apps.py ====

```python
from django.apps import AppConfig


class EmailsConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "emails"

```

# ==== emails/admin.py ====

```python
from django.contrib import admin
from .models import EmailTemplate, EmailLog

@admin.register(EmailTemplate)
class EmailTemplateAdmin(admin.ModelAdmin):
    list_display = ['name', 'subject', 'is_active']

@admin.register(EmailLog)
class EmailLogAdmin(admin.ModelAdmin):
    list_display = ['recipient_email', 'subject', 'was_sent', 'sent_at']
    readonly_fields = ['sent_at']
    list_filter = ['was_sent']
    
    def has_add_permission(self, request):
        return False  # Emails created automatically, not manually
```

# ==== emails/views.py ====

```python
from django.shortcuts import render

# Create your views here.

```

# ==== emails/management/commands/create_email_templates.py ====

```python
from django.core.management.base import BaseCommand
from emails.models import EmailTemplate

class Command(BaseCommand):
    help = 'Create default email templates'

    def handle(self, *args, **options):
        # Thank you email template
        thank_you_template = """
<!DOCTYPE html>
<html>
<head>
    <style>
        body {{
            font-family: 'Arial', sans-serif;
            line-height: 1.6;
            color: #0F172A;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }}
        .header {{
            background: linear-gradient(135deg, #0F172A 0%, #1E40AF 50%, #0891B2 100%);
            color: white;
            padding: 30px;
            border-radius: 10px;
            text-align: center;
            margin-bottom: 30px;
        }}
        .content {{
            background: #ffffff;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }}
        .donation-details {{
            background: #F0F9FF;
            padding: 20px;
            border-radius: 8px;
            margin: 20px 0;
            border-left: 4px solid #1E40AF;
        }}
        .progress-bar {{
            background: #E5E7EB;
            height: 20px;
            border-radius: 10px;
            overflow: hidden;
            margin: 10px 0;
        }}
        .progress-fill {{
            background: linear-gradient(90deg, #1E40AF 0%, #0891B2 100%);
            height: 100%;
            border-radius: 10px;
            width: {progress_percentage}%;
        }}
        .footer {{
            text-align: center;
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #E5E7EB;
            color: #6B7280;
        }}
        .cta-button {{
            display: inline-block;
            background: #1E40AF;
            color: white;
            padding: 12px 24px;
            text-decoration: none;
            border-radius: 8px;
            margin: 15px 0;
        }}
    </style>
</head>
<body>
    <div class="header">
        <h1>🌊 Thank You, {donor_name}!</h1>
        <p>Your support means everything to me</p>
    </div>
    
    <div class="content">
        <h2>Your Generous Donation</h2>
        <p>Dear {donor_name},</p>
        
        <p>I am deeply grateful for your donation of <strong>${amount}</strong> to "{campaign_title}". Your contribution brings me one step closer to securing accessible housing and continuing my journey as a developer.</p>
        
        <div class="donation-details">
            <h3>Donation Details</h3>
            <p><strong>Amount:</strong> ${amount}</p>
            <p><strong>Date:</strong> {donation_date}</p>
            <p><strong>Campaign:</strong> {campaign_title}</p>
        </div>
        
        <h3>Campaign Progress</h3>
        <p>Thanks to supporters like you, we've raised <strong>${current_total}</strong> of our ${goal_amount} goal!</p>
        
        <div class="progress-bar">
            <div class="progress-fill"></div>
        </div>
        <p style="text-align: center; margin-top: 10px;">
            <strong>{progress_percentage:.1f}% Complete</strong>
        </p>
        
        <h3>What This Means</h3>
        <p>Your donation helps fund:</p>
        <ul>
            <li>🚿 Roll-in shower and bathroom modifications</li>
            <li>🏠 Caregiver-friendly living accommodations</li>
            <li>📍 Strategic location near my support network</li>
            <li>♿ Complete accessibility setup for independence</li>
        </ul>
        
        <p>As a quadriplegic developer who taught himself to code after a diving accident, I'm working to prove that disability doesn't limit potential - it just changes the approach. Your support helps me continue inspiring others while building a more accessible future.</p>
        
        <div style="text-align: center; margin: 30px 0;">
            <a href="https://mattfreedomfundraiser.com" class="cta-button">
                Follow My Journey
            </a>
        </div>
        
        <p>With heartfelt gratitude,<br>
        <strong>Matt Raynor</strong><br>
        <em>From Sea to Source Code</em> 🌊💻</p>
    </div>
    
    <div class="footer">
        <p>You're receiving this email because you made a donation to Matt's fundraising campaign.</p>
        <p>Matt Freedom Fundraiser • Hampton Bays, NY</p>
    </div>
</body>
</html>
        """
        
        # Create or update the template
        template, created = EmailTemplate.objects.update_or_create(
            name='thank_you_email',
            defaults={
                'subject': 'Thank you for your support, {donor_name}! 🌊',
                'html_content': thank_you_template.strip(),
                'is_active': True
            }
        )
        
        if created:
            self.stdout.write(
                self.style.SUCCESS('✅ Created thank you email template')
            )
        else:
            self.stdout.write(
                self.style.SUCCESS('✅ Updated thank you email template')
            )
```

# ==== accounts/models.py ====

```python
from django.contrib.auth.models import AbstractBaseUser, PermissionsMixin
from django.db import models
from django.utils import timezone
from django.contrib.auth.base_user import BaseUserManager


class CustomUserManager(BaseUserManager):
    def create_user(self, email, password=None, **extra_fields):
        if not email:
            raise ValueError("The Email field must be set")
        email = self.normalize_email(email)
        user = self.model(email=email, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, password, **extra_fields):
        extra_fields.setdefault("is_staff", True)
        extra_fields.setdefault("is_superuser", True)
        if not extra_fields.get("is_staff") or not extra_fields.get("is_superuser"):
            raise ValueError("Superuser must have is_staff=True and is_superuser=True.")
        return self.create_user(email, password, **extra_fields)


class CustomUser(AbstractBaseUser, PermissionsMixin):
    email = models.EmailField(unique=True)
    first_name = models.CharField(max_length=30, blank=True)
    last_name = models.CharField(max_length=30, blank=True)
    is_staff = models.BooleanField(default=False)
    is_active = models.BooleanField(default=True)
    date_joined = models.DateTimeField(default=timezone.now)

    USERNAME_FIELD = "email"
    REQUIRED_FIELDS = []

    objects = CustomUserManager()

    def __str__(self):
        return self.email

```

# ==== accounts/social_auth.py ====

```python
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from rest_framework.authtoken.models import Token
from django.contrib.auth import get_user_model
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
import os
import logging

logger = logging.getLogger(__name__)
User = get_user_model()

@method_decorator(csrf_exempt, name='dispatch')
class GoogleAuthView(APIView):
    def post(self, request):
        """Simplified Google OAuth - no JWT verification needed"""
        try:
            print("🔑 Google auth request received")
            print(f"Request data keys: {list(request.data.keys())}")
            
            credential = request.data.get('credential')
            user_info = request.data.get('user_info', {})
            
            if not credential:
                print("❌ No credential provided")
                return Response({'error': 'Google credential required'}, 
                              status=status.HTTP_400_BAD_REQUEST)
            
            # Extract email from user_info (already parsed by frontend)
            email = user_info.get('email')
            if not email:
                print("❌ No email in user_info")
                print(f"Available user_info: {user_info}")
                return Response({'error': 'Email not provided'}, 
                              status=status.HTTP_400_BAD_REQUEST)
            
            print(f"✅ Processing auth for email: {email}")
            
            # Get or create user (simplified approach)
            try:
                user = User.objects.get(email=email)
                print(f"👤 Found existing user: {email}")
                
                # Update names if they're empty
                if not user.first_name and user_info.get('given_name'):
                    user.first_name = user_info.get('given_name', '')
                if not user.last_name and user_info.get('family_name'):
                    user.last_name = user_info.get('family_name', '')
                user.save()
                
            except User.DoesNotExist:
                print(f"📝 Creating new user: {email}")
                user = User.objects.create_user(
                    email=email,
                    first_name=user_info.get('given_name', ''),
                    last_name=user_info.get('family_name', ''),
                )
            
            # Create or get token
            token, created = Token.objects.get_or_create(user=user)
            print(f"🔑 Token {'created' if created else 'retrieved'} for user")
            
            response_data = {
                'token': token.key,
                'user': {
                    'id': user.id,
                    'email': user.email,
                    'first_name': user.first_name,
                    'last_name': user.last_name,
                }
            }
            
            print(f"✅ Sending success response for user {email}")
            return Response(response_data)
            
        except Exception as e:
            print(f"❌ Unexpected error in Google auth: {e}")
            import traceback
            traceback.print_exc()
            return Response({'error': 'Google authentication failed'}, 
                          status=status.HTTP_500_INTERNAL_SERVER_ERROR)

@method_decorator(csrf_exempt, name='dispatch')
class FacebookAuthView(APIView):
    def post(self, request):
        """Facebook auth placeholder"""
        return Response({'error': 'Facebook auth not available on HTTP'}, 
                      status=status.HTTP_400_BAD_REQUEST)
```

# ==== accounts/serializers.py ====

```python
from rest_framework import serializers
from django.contrib.auth import get_user_model

User = get_user_model()


class CustomUserSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True, required=True, min_length=8)

    class Meta:
        model = User
        fields = ["id", "email", "first_name", "last_name", "password"]
        read_only_fields = ["id"]

    def create(self, validated_data):
        user = User.objects.create_user(
            email=validated_data["email"],
            password=validated_data["password"],
            first_name=validated_data.get("first_name", ""),
            last_name=validated_data.get("last_name", "")
        )
        return user

    def update(self, instance, validated_data):
        for attr, value in validated_data.items():
            if attr == "password":
                instance.set_password(value)
            else:
                setattr(instance, attr, value)
        instance.save()
        return instance

```

# ==== accounts/apps.py ====

```python
from django.apps import AppConfig


class AccountsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'accounts'

```

# ==== accounts/forms.py ====

```python
from django.contrib.auth import get_user_model
from django.contrib.auth.forms import UserCreationForm, UserChangeForm

class CustomUserCreationForm(UserCreationForm):
    class Meta:
        model = get_user_model()
        fields = ("email",)  # Remove 'username'

class CustomUserChangeForm(UserChangeForm):
    class Meta:
        model = get_user_model()
        fields = ("email",)  # Remove 'username'

```

# ==== accounts/admin.py ====

```python
from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from .models import CustomUser
from .forms import CustomUserCreationForm, CustomUserChangeForm

@admin.register(CustomUser)
class CustomUserAdmin(UserAdmin):
    add_form = CustomUserCreationForm
    form = CustomUserChangeForm
    model = CustomUser

    list_display = ("email", "first_name", "last_name", "is_staff", "is_active")
    list_filter = ("is_staff", "is_active")
    ordering = ("email",)

    fieldsets = (
        (None, {"fields": ("email", "password")}),
        ("Personal Info", {"fields": ("first_name", "last_name")}),
        ("Permissions", {"fields": ("is_staff", "is_active", "groups", "user_permissions")}),
        ("Important dates", {"fields": ("last_login", "date_joined")}),
    )

    add_fieldsets = (
        (None, {
            "classes": ("wide",),
            "fields": ("email", "password1", "password2", "is_staff", "is_active"),
        }),
    )

```

# ==== accounts/api_auth.py ====

```python
from rest_framework.authtoken.views import ObtainAuthToken
from rest_framework.authtoken.models import Token
from rest_framework.response import Response
from rest_framework import status
from django.contrib.auth import authenticate
from rest_framework.views import APIView
from rest_framework.permissions import AllowAny


class CustomAuthToken(APIView):
    permission_classes = [AllowAny]

    def post(self, request, *args, **kwargs):
        email = request.data.get("email")
        password = request.data.get("password")

        if not email or not password:
            return Response({"error": "Email and password are required."}, status=status.HTTP_400_BAD_REQUEST)

        user = authenticate(request, username=email, password=password)

        if not user:
            return Response({"error": "Invalid credentials."}, status=status.HTTP_400_BAD_REQUEST)

        token, _ = Token.objects.get_or_create(user=user)
        return Response({
            "token": token.key,
            "user_id": user.id,
            "email": user.email,
        })

```

# ==== accounts/urls.py ====

```python
from django.urls import path
from .views import SignupAPIView, UserProfileAPIView, CustomAuthToken
from .social_auth import GoogleAuthView, FacebookAuthView


app_name = "accounts"

urlpatterns = [
    path("signup/", SignupAPIView.as_view(), name="signup"),
    path("me/", UserProfileAPIView.as_view(), name="user-profile"),
    path("login/", CustomAuthToken.as_view(), name="token-login"),
    path("auth/google/", GoogleAuthView.as_view(), name="google-auth"),
    path("auth/facebook/", FacebookAuthView.as_view(), name="facebook-auth"),


]

```

# ==== accounts/views.py ====

```python
from rest_framework import generics, permissions, status
from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework.authtoken.views import ObtainAuthToken
from rest_framework.authtoken.models import Token
from django.contrib.auth import authenticate, get_user_model

from .serializers import CustomUserSerializer

User = get_user_model()


class SignupAPIView(generics.CreateAPIView):
    """
    POST /api/accounts/signup/
    """
    queryset = User.objects.all()
    serializer_class = CustomUserSerializer
    permission_classes = [permissions.AllowAny]


class UserProfileAPIView(APIView):
    """
    GET, PUT /api/accounts/me/
    """
    permission_classes = [permissions.IsAuthenticated]

    def get(self, request):
        serializer = CustomUserSerializer(request.user)
        return Response(serializer.data)

    def put(self, request):
        serializer = CustomUserSerializer(request.user, data=request.data, partial=True)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class CustomAuthToken(ObtainAuthToken):
    """
    POST /api/accounts/login/
    Authenticates using email and password.
    """
    def post(self, request, *args, **kwargs):
        email = request.data.get("email")
        password = request.data.get("password")

        if not email or not password:
            return Response({"error": "Email and password are required."}, status=status.HTTP_400_BAD_REQUEST)

        user = authenticate(request, email=email, password=password)
        if not user:
            return Response({"error": "Invalid credentials."}, status=status.HTTP_401_UNAUTHORIZED)

        token, created = Token.objects.get_or_create(user=user)
        return Response({"token": token.key})

```

# ==== django_project/celery_urls.py ====

```python
# django_project/celery_urls.py
# Minimal URL configuration for Celery workers (bypasses admin)

from django.urls import path
from django.http import JsonResponse

def celery_health_check(request):
    """Simple health check for Celery workers"""
    return JsonResponse({
        "status": "celery_worker_healthy",
        "service": "celery",
        "message": "Celery worker URLs loaded successfully"
    })

# Minimal URL patterns that don't require admin or complex routing
urlpatterns = [
    path("health/", celery_health_check, name="celery-health"),
]
```

# ==== django_project/asgi.py ====

```python
"""
ASGI config for django_project project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project.settings.prod')

application = get_asgi_application()

```

# ==== django_project/__init__.py ====

```python
# django_project/__init__.py
from __future__ import absolute_import, unicode_literals

# This will make sure the app is always imported when
# Django starts so that shared_task will use this app.
from .celery import app as celery_app

__all__ = ('celery_app',)
```

# ==== django_project/celery.py ====

```python
from __future__ import absolute_import, unicode_literals
import os
from celery import Celery

# Set default Django settings module for the 'celery' program
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project.settings.dev')

app = Celery('django_project')

# Using a string here means the worker doesn't have to serialize
# the configuration object to child processes
app.config_from_object('django.conf:settings', namespace='CELERY')

# Load task modules from all registered Django apps
app.autodiscover_tasks()

@app.task(bind=True)
def debug_task(self):
    print(f'Request: {self.request!r}')

print("✅ Celery app configured successfully")
```

# ==== django_project/urls.py ====

```python
from django.contrib import admin
from django.urls import path, include
from django.http import JsonResponse

def api_root(request):
    return JsonResponse({
        "message": "Matt Freedom Fundraiser API v2",
        "endpoints": {
            "current_campaign": "/api/donations/campaign/",
            "recent_donations": "/api/donations/recent/",
            "campaign_updates": "/api/donations/updates/",
            "create_donation": "/api/donations/create/",
            "accounts": "/api/accounts/",
            "admin": "/admin/",
        }
    })

def health_check(request):
    return JsonResponse({"status": "healthy", "service": "matt-freedom-fundraiser"})

urlpatterns = [
    path("", api_root),
    path("health/", health_check),
    path("admin/", admin.site.urls),
    path("api/accounts/", include("accounts.urls")),
    path("api/donations/", include("donations.urls")),
]
```

# ==== django_project/wsgi.py ====

```python
"""
WSGI config for django_project project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project.settings.prod')

application = get_wsgi_application()

```

# ==== django_project/settings/test.py ====

```python
from .base import *

DEBUG = False
SECRET_KEY = "test-secret-key"

STRIPE_PUBLISHABLE_KEY = "pk_test_dummy"
STRIPE_SECRET_KEY = "sk_test_dummy"
STRIPE_WEBHOOK_SECRET = "whsec_dummy"
stripe.api_key = STRIPE_SECRET_KEY



EMAIL_BACKEND = "django.core.mail.backends.locmem.EmailBackend"
EMAIL_HOST = "localhost"
EMAIL_PORT = 1025
EMAIL_USE_TLS = False
EMAIL_HOST_USER = ""
EMAIL_HOST_PASSWORD = ""
DEFAULT_FROM_EMAIL = "test@example.com"


# In-memory test DB
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "test.sqlite3",
    }
}

RECAPTCHA_PUBLIC_KEY = "test"
RECAPTCHA_PRIVATE_KEY = "test"

# 👇 Google SSO override here only for tests
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': ['profile', 'email'],
        'AUTH_PARAMS': {'access_type': 'online'},
        'OAUTH_PKCE_ENABLED': True,
        'APP': {
            'client_id': 'test-client-id',
            'secret': 'test-secret',
            'key': ''
        }
    }
}

SECURE_SSL_REDIRECT = False
SECURE_HSTS_SECONDS = 0
SECURE_HSTS_INCLUDE_SUBDOMAINS = False
SECURE_HSTS_PRELOAD = False
SESSION_COOKIE_SECURE = False
CSRF_COOKIE_SECURE = False

```

# ==== django_project/settings/dev.py ====

```python
from .base import *

DEBUG = True

# Fixed database name!
DATABASES = {
    "default": env.db_url("DATABASE_URL", default="postgresql://postgres:postgres_password@db:5432/donations_db")
}

ALLOWED_HOSTS = ["localhost", "127.0.0.1", "0.0.0.0", "backend"]

CORS_ALLOW_ALL_ORIGINS = True


# Fixed CORS ports!
# Fixed CORS ports!
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5174",  
    "http://127.0.0.1:5174",  
]

CSRF_TRUSTED_ORIGINS = [
    "http://localhost:5174",  
    "http://127.0.0.1:5174",  
]

EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
FRONTEND_URL = env("FRONTEND_URL", default="http://localhost:5173")
SENDGRID_API_KEY = ""  # Empty for now

# Replace the console backend with Gmail SMTP
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = env("GMAIL_USER", default="")
EMAIL_HOST_PASSWORD = env("GMAIL_APP_PASSWORD", default="")
DEFAULT_FROM_EMAIL = env("GMAIL_USER", default="")
```

# ==== django_project/settings/prod.py ====

```python
# django_project/settings/prod.py - IMPROVED WITH DATABASE ERROR HANDLING
from .base import *
import os
import sys
import dj_database_url
from django.core.exceptions import ImproperlyConfigured

DEBUG = False

# ---------------- SECURITY ----------------
SECURE_SSL_REDIRECT = True
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = "DENY"
SECURE_HSTS_SECONDS = 31536000
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True

# ---------------- STATIC FILES ----------------
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
STATIC_ROOT = BASE_DIR / "staticfiles"

# ---------------- DATABASE (IMPROVED ERROR HANDLING) ----------------
DATABASE_URL = os.environ.get("DATABASE_URL")

if DATABASE_URL:
    try:
        print(f"🔍 Raw DATABASE_URL: {DATABASE_URL[:50]}...", file=sys.stderr)
        
        parsed = dj_database_url.parse(
            DATABASE_URL,
            conn_max_age=600,
            conn_health_checks=True,
        )
        
        # Add engine if missing
        if "ENGINE" not in parsed:
            parsed["ENGINE"] = "django.db.backends.postgresql"
        
        print(f"✅ DEBUG: Parsed DATABASE_URL → {parsed}", file=sys.stderr)
        
        # 🔥 FIX: Handle empty database name (common Fly.io issue)
        if not parsed.get("NAME") or parsed.get("NAME") == "":
            # Try to extract database name from the app name
            app_name = os.environ.get("FLY_APP_NAME", "ai-face-swap-app")
            # Remove the "-app" suffix if present for database name
            db_name = app_name.replace("-app", "")
            parsed["NAME"] = db_name
            print(f"🔧 Fixed empty database name: using '{db_name}'", file=sys.stderr)
        
        # Validate all required database fields
        required_fields = ["ENGINE", "NAME", "USER", "HOST", "PORT"]
        missing_fields = [field for field in required_fields if not parsed.get(field)]
        
        if missing_fields:
            print(f"❌ Missing database fields: {missing_fields}", file=sys.stderr)
            raise ImproperlyConfigured(f"Missing database configuration fields: {missing_fields}")
        
        DATABASES = {"default": parsed}
        print(f"✅ Database configured successfully: {parsed['NAME']}@{parsed['HOST']}", file=sys.stderr)
        
    except Exception as e:
        print(f"❌ Database configuration error: {e}", file=sys.stderr)
        print(f"Raw DATABASE_URL was: {DATABASE_URL}", file=sys.stderr)
        
        # 🔥 FALLBACK: Try manual parsing if dj_database_url fails
        if "postgres://" in DATABASE_URL or "postgresql://" in DATABASE_URL:
            print("🔧 Attempting manual DATABASE_URL parsing...", file=sys.stderr)
            try:
                import re
                # Parse postgres://user:password@host:port/database
                match = re.match(r'postgres(?:ql)?://([^:]+):([^@]+)@([^:]+):(\d+)/(.+)', DATABASE_URL)
                if match:
                    user, password, host, port, database = match.groups()
                    # Remove query parameters if present
                    database = database.split('?')[0]
                    
                    DATABASES = {
                        "default": {
                            "ENGINE": "django.db.backends.postgresql",
                            "NAME": database,
                            "USER": user,
                            "PASSWORD": password,
                            "HOST": host,
                            "PORT": int(port),
                            "CONN_MAX_AGE": 600,
                            "CONN_HEALTH_CHECKS": True,
                        }
                    }
                    print(f"✅ Manual parsing successful: {database}@{host}", file=sys.stderr)
                else:
                    raise Exception("Could not parse DATABASE_URL format")
            except Exception as manual_error:
                print(f"❌ Manual parsing also failed: {manual_error}", file=sys.stderr)
                raise ImproperlyConfigured(f"Could not configure database: {e}")
        else:
            raise ImproperlyConfigured(f"Invalid DATABASE_URL format: {e}")
else:
    print("❌ No DATABASE_URL environment variable found", file=sys.stderr)
    raise ImproperlyConfigured("DATABASE_URL environment variable is required in production")

# ---------------- HOSTS ----------------
# Get app name from Fly.io environment
FLY_APP_NAME = os.environ.get("FLY_APP_NAME", "ai-face-swap-app")

ALLOWED_HOSTS = [
    f"{FLY_APP_NAME}.fly.dev",
    "ai-face-swap-app.fly.dev",
    "localhost",
    "127.0.0.1",
]

# Add custom allowed hosts from environment
custom_hosts = os.environ.get("DJANGO_ALLOWED_HOSTS", "")
if custom_hosts:
    ALLOWED_HOSTS.extend([host.strip() for host in custom_hosts.split(",") if host.strip()])

CSRF_TRUSTED_ORIGINS = [
    f"https://{FLY_APP_NAME}.fly.dev",
    "https://ai-face-swap-app.fly.dev",
]

# CORS for frontend
CORS_ALLOWED_ORIGINS = [
    f"https://{FLY_APP_NAME}.fly.dev",
    "https://ai-face-swap-app.fly.dev",
]

# ---------------- LOGGING (IMPROVED) ----------------
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        "django.db.backends": {
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
}

print(f"✅ Production settings loaded for {FLY_APP_NAME}", file=sys.stderr)
```

# ==== django_project/settings/base.py ====

```python
from environ import Env
from pathlib import Path
import stripe
import os
from django.core.management.utils import get_random_secret_key

print("🎯 Matt Freedom Fundraiser v2 - Settings Loaded")

# Cloudinary Configuration
import cloudinary
import cloudinary.uploader
import cloudinary.api

# Initialize environment variables
env = Env()

FRONTEND_URL = env("FRONTEND_URL", default="http://localhost:5173")


# Cloudinary setup
cloudinary_url = env('CLOUDINARY_URL', default='')
if cloudinary_url:
    import re
    match = re.match(r'cloudinary://(\d+):([^@]+)@(.+)', cloudinary_url)
    if match:
        api_key, api_secret, cloud_name = match.groups()
        CLOUDINARY_STORAGE = {
            'CLOUD_NAME': cloud_name,
            'API_KEY': api_key,
            'API_SECRET': api_secret,
        }
        print(f"✅ Cloudinary configured for cloud: {cloud_name}")
    else:
        CLOUDINARY_STORAGE = {
            'CLOUD_NAME': env('CLOUDINARY_CLOUD_NAME', default='placeholder'),
            'API_KEY': env('CLOUDINARY_API_KEY', default='dummy'),
            'API_SECRET': env('CLOUDINARY_API_SECRET', default='dummy'),
        }
else:
    CLOUDINARY_STORAGE = {
        'CLOUD_NAME': env('CLOUDINARY_CLOUD_NAME', default='placeholder'),
        'API_KEY': env('CLOUDINARY_API_KEY', default='dummy'),
        'API_SECRET': env('CLOUDINARY_API_SECRET', default='dummy'),
    }

cloudinary.config(
    cloud_name=CLOUDINARY_STORAGE['CLOUD_NAME'],
    api_key=CLOUDINARY_STORAGE['API_KEY'],
    api_secret=CLOUDINARY_STORAGE['API_SECRET'],
    secure=True
)

# Stripe Configuration
STRIPE_PUBLISHABLE_KEY = env('STRIPE_PUBLISHABLE_KEY', default='pk_test_dummy')
STRIPE_SECRET_KEY = env('STRIPE_SECRET_KEY', default='sk_test_dummy')
STRIPE_WEBHOOK_SECRET = env('STRIPE_WEBHOOK_SECRET', default='whsec_dummy')
stripe.api_key = STRIPE_SECRET_KEY

# Base directory
BASE_DIR = Path(__file__).resolve().parent.parent

# Security
SECRET_KEY = env("DJANGO_SECRET_KEY", default=get_random_secret_key())
DEBUG = env.bool("DJANGO_DEBUG", default=False)

# Hosts
ALLOWED_HOSTS = env.list("DJANGO_ALLOWED_HOSTS", default=[
    "localhost", "127.0.0.1", "0.0.0.0", "backend", "*.fly.dev"
])

# Celery Worker Detection
import sys
IS_CELERY = (
    os.environ.get('IS_CELERY_WORKER') == 'true' or
    'celery' in sys.argv[0] or 
    'worker' in sys.argv or
    'beat' in sys.argv
)

# CSRF Exemptions for donation platform
CSRF_EXEMPT_URLS = [
    r'^/api/accounts/auth/google/$',
    r'^/api/stripe/webhook/$',
]

class DisableCSRFMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        import re
        for pattern in CSRF_EXEMPT_URLS:
            if re.match(pattern, request.path_info):
                setattr(request, '_dont_enforce_csrf_checks', True)
        return self.get_response(request)

# Application Configuration
if IS_CELERY:
    print("🔧 Celery worker - minimal configuration")
    
    INSTALLED_APPS = [
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'cloudinary_storage',
        'cloudinary',
        
        # Donation platform apps
        'accounts.apps.AccountsConfig',
        'donations.apps.DonationsConfig',
        'emails.apps.EmailsConfig',
        
        # Celery
        'django_celery_beat',
        'django_celery_results',
        'rest_framework',
        'rest_framework.authtoken',
    ]
    
    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
    ]
    
    ROOT_URLCONF = 'django_project.celery_urls'
    
else:
    print("🌐 Full Django web server configuration")
    
    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'cloudinary_storage',
        'cloudinary',
        
        'accounts.apps.AccountsConfig',

        # Donation platform apps
        'donations.apps.DonationsConfig',
        'emails.apps.EmailsConfig',

        # Auth (optional - remove if not using Google auth)
        'django.contrib.sites',
        'allauth',
        'allauth.account',
        'allauth.socialaccount',
        'allauth.socialaccount.providers.google',

        # API
        'corsheaders',
        'rest_framework',
        'rest_framework.authtoken',
        'django_celery_beat',
        'django_celery_results', 
    ]

    MIDDLEWARE = [
        'corsheaders.middleware.CorsMiddleware',
        'django_project.settings.base.DisableCSRFMiddleware',
        'django.middleware.security.SecurityMiddleware',
        'whitenoise.middleware.WhiteNoiseMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'allauth.account.middleware.AccountMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
    ]
    
    ROOT_URLCONF = 'django_project.urls'

# Templates
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR.parent / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_project.wsgi.application'

# Database
DATABASES = {
    "default": env.db_url("DATABASE_URL", default="sqlite:///tmp/build.db")
}

# Authentication
AUTH_USER_MODEL = 'accounts.CustomUser'
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Google OAuth (optional)
SITE_ID = env.int("DJANGO_SITE_ID", default=1)
ACCOUNT_LOGIN_METHODS = {'email'}
ACCOUNT_EMAIL_VERIFICATION = 'optional'

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': ['profile', 'email'],
        'APP': {
            'client_id': env('GOOGLE_CLIENT_ID', default='test-client-id'),
            'secret': env('GOOGLE_CLIENT_SECRET', default='test-secret'),
        }
    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files
STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

# Email
EMAIL_BACKEND = env("EMAIL_BACKEND", default="django.core.mail.backends.console.EmailBackend")
EMAIL_HOST = env("EMAIL_HOST", default="smtp.sendgrid.net")
EMAIL_PORT = env.int("EMAIL_PORT", default=587)
EMAIL_USE_TLS = True
EMAIL_HOST_USER = "apikey"
EMAIL_HOST_PASSWORD = env("SENDGRID_API_KEY", default="")
DEFAULT_FROM_EMAIL = env("DEFAULT_FROM_EMAIL", default="donations@mattfreedomfundraiser.com")

# REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
}

# CORS (only for non-Celery)
if not IS_CELERY:
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:5173",  # ✅ Your actual frontend port
        "http://127.0.0.1:5173",  # ✅ Same but with 127.0.0.1
        # Production Netlify domain will be added here later
    ]
    CORS_ALLOW_CREDENTIALS = True
# Celery
CELERY_BROKER_URL = env('CELERY_BROKER_URL', default='redis://redis:6379/0')
CELERY_RESULT_BACKEND = 'django-db'
CELERY_TIMEZONE = TIME_ZONE

# Default field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

print(f"✅ Settings loaded - Celery: {IS_CELERY}")
```

# ==== Dockerfile ====

```
# Production Dockerfile for Donation Platform
FROM python:3.12-slim

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    libpq-dev \
    curl \
    # For WeasyPrint (PDF generation)
    libpango-1.0-0 \
    libpangocairo-1.0-0 \
    libgdk-pixbuf2.0-0 \
    libffi-dev \
    shared-mime-info \
    # Cleanup
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Set work directory
WORKDIR /app

# Copy requirements and install Python packages
COPY requirements.txt /app/
RUN pip install --no-cache-dir --upgrade pip wheel
RUN pip install --no-cache-dir -r requirements.txt

# Set build-time environment variables
ENV DJANGO_SETTINGS_MODULE=django_project.settings.base
ENV DJANGO_SECRET_KEY=build-time-secret-key
ENV DATABASE_URL=sqlite:///tmp/build.db
ENV CLOUDINARY_URL=cloudinary://dummy:dummy@dummy
ENV STRIPE_SECRET_KEY=sk_test_dummy
ENV STRIPE_PUBLISHABLE_KEY=pk_test_dummy

# Copy project
COPY . /app/

# Create directories
RUN mkdir -p /app/staticfiles /app/media

# Collect static files
RUN python manage.py collectstatic --noinput || echo "Collectstatic failed, continuing..."

# Create non-root user for security
RUN adduser --disabled-password --gecos '' appuser
RUN chown -R appuser:appuser /app
USER appuser

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
  CMD python -c "import requests; requests.get('http://localhost:8000/health/', timeout=10)" || exit 1

# Default command
CMD ["gunicorn", "--bind", "0.0.0.0:8000", "--workers", "3", "--timeout", "120", "django_project.wsgi:application"]
```

# ==== Dockerfile.dev ====

```
# Development Dockerfile for Donation Platform
FROM python:3.12-slim

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    libpq-dev \
    git \
    curl \
    # For WeasyPrint (PDF generation)
    libpango-1.0-0 \
    libpangocairo-1.0-0 \
    libgdk-pixbuf2.0-0 \
    libffi-dev \
    shared-mime-info \
    # Cleanup
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Set work directory
WORKDIR /app

# Copy requirements first for better caching
COPY requirements.txt requirements-dev.txt /app/

# Upgrade pip and install dependencies
RUN pip install --no-cache-dir --upgrade pip wheel
RUN pip install --no-cache-dir -r requirements-dev.txt

# Copy project
COPY . /app/

# Create directories
RUN mkdir -p /app/staticfiles /app/media

# Expose port
EXPOSE 8000

# Default command for development
CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]
```
